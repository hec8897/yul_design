function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return !!right[Symbol.hasInstance](left); } else { return left instanceof right; } }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*! Summernote v0.8.15 | (c) 2013- Alan Hong and other contributors | MIT license */
!function (t, e) {
  if ("object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "object" == (typeof module === "undefined" ? "undefined" : _typeof(module))) module.exports = e(require("jquery"));else if ("function" == typeof define && define.amd) define(["jquery"], e);else {
    var o = "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? e(require("jquery")) : e(t.jQuery);

    for (var i in o) {
      ("object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? exports : t)[i] = o[i];
    }
  }
}(window, function (t) {
  return function (t) {
    var e = {};

    function o(i) {
      if (e[i]) return e[i].exports;
      var n = e[i] = {
        i: i,
        l: !1,
        exports: {}
      };
      return t[i].call(n.exports, n, n.exports, o), n.l = !0, n.exports;
    }

    return o.m = t, o.c = e, o.d = function (t, e, i) {
      o.o(t, e) || Object.defineProperty(t, e, {
        enumerable: !0,
        get: i
      });
    }, o.r = function (t) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {
        value: "Module"
      }), Object.defineProperty(t, "__esModule", {
        value: !0
      });
    }, o.t = function (t, e) {
      if (1 & e && (t = o(t)), 8 & e) return t;
      if (4 & e && "object" == _typeof(t) && t && t.__esModule) return t;
      var i = Object.create(null);
      if (o.r(i), Object.defineProperty(i, "default", {
        enumerable: !0,
        value: t
      }), 2 & e && "string" != typeof t) for (var n in t) {
        o.d(i, n, function (e) {
          return t[e];
        }.bind(null, n));
      }
      return i;
    }, o.n = function (t) {
      var e = t && t.__esModule ? function () {
        return t.default;
      } : function () {
        return t;
      };
      return o.d(e, "a", e), e;
    }, o.o = function (t, e) {
      return Object.prototype.hasOwnProperty.call(t, e);
    }, o.p = "", o(o.s = 50);
  }({
    0: function _(e, o) {
      e.exports = t;
    },
    1: function _(t, e, o) {
      "use strict";

      var i = o(0),
          n = o.n(i);

      var s =
      /*#__PURE__*/
      function () {
        function s(t, e, o, i) {
          this.markup = t, this.children = e, this.options = o, this.callback = i;
        }

        var _proto = s.prototype;

        _proto.render = function render(t) {
          var e = n()(this.markup);

          if (this.options && this.options.contents && e.html(this.options.contents), this.options && this.options.className && e.addClass(this.options.className), this.options && this.options.data && n.a.each(this.options.data, function (t, o) {
            e.attr("data-" + t, o);
          }), this.options && this.options.click && e.on("click", this.options.click), this.children) {
            var _t = e.find(".note-children-container");

            this.children.forEach(function (o) {
              o.render(_t.length ? _t : e);
            });
          }

          return this.callback && this.callback(e, this.options), this.options && this.options.callback && this.options.callback(e), t && t.append(e), e;
        };

        return s;
      }();

      e.a = {
        create: function create(t, e) {
          return function () {
            var o = "object" == _typeof(arguments[1]) ? arguments[1] : arguments[0];
            var i = Array.isArray(arguments[0]) ? arguments[0] : [];
            return o && o.children && (i = o.children), new s(t, i, o, e);
          };
        }
      };
    },
    2: function _(t, e) {
      (function (e) {
        t.exports = e;
      }).call(this, {});
    },
    3: function _(t, e, o) {
      "use strict";

      var i = o(0),
          n = o.n(i);
      n.a.summernote = n.a.summernote || {
        lang: {}
      }, n.a.extend(n.a.summernote.lang, {
        "en-US": {
          font: {
            bold: "Bold",
            italic: "Italic",
            underline: "Underline",
            clear: "Remove Font Style",
            height: "Line Height",
            name: "Font Family",
            strikethrough: "Strikethrough",
            subscript: "Subscript",
            superscript: "Superscript",
            size: "Font Size",
            sizeunit: "Font Size Unit"
          },
          image: {
            image: "Picture",
            insert: "Insert Image",
            resizeFull: "Resize full",
            resizeHalf: "Resize half",
            resizeQuarter: "Resize quarter",
            resizeNone: "Original size",
            floatLeft: "Float Left",
            floatRight: "Float Right",
            floatNone: "Remove float",
            shapeRounded: "Shape: Rounded",
            shapeCircle: "Shape: Circle",
            shapeThumbnail: "Shape: Thumbnail",
            shapeNone: "Shape: None",
            dragImageHere: "Drag image or text here",
            dropImage: "Drop image or Text",
            selectFromFiles: "Select from files",
            maximumFileSize: "Maximum file size",
            maximumFileSizeError: "Maximum file size exceeded.",
            url: "Image URL",
            remove: "Remove Image",
            original: "Original"
          },
          video: {
            video: "Video",
            videoLink: "Video Link",
            insert: "Insert Video",
            url: "Video URL",
            providers: "(YouTube, Vimeo, Vine, Instagram, DailyMotion or Youku)"
          },
          link: {
            link: "Link",
            insert: "Insert Link",
            unlink: "Unlink",
            edit: "Edit",
            textToDisplay: "Text to display",
            url: "To what URL should this link go?",
            openInNewWindow: "Open in new window",
            useProtocol: "Use default protocol"
          },
          table: {
            table: "Table",
            addRowAbove: "Add row above",
            addRowBelow: "Add row below",
            addColLeft: "Add column left",
            addColRight: "Add column right",
            delRow: "Delete row",
            delCol: "Delete column",
            delTable: "Delete table"
          },
          hr: {
            insert: "Insert Horizontal Rule"
          },
          style: {
            style: "Style",
            p: "Normal",
            blockquote: "Quote",
            pre: "Code",
            h1: "Header 1",
            h2: "Header 2",
            h3: "Header 3",
            h4: "Header 4",
            h5: "Header 5",
            h6: "Header 6"
          },
          lists: {
            unordered: "Unordered list",
            ordered: "Ordered list"
          },
          options: {
            help: "Help",
            fullscreen: "Full Screen",
            codeview: "Code View"
          },
          paragraph: {
            paragraph: "Paragraph",
            outdent: "Outdent",
            indent: "Indent",
            left: "Align left",
            center: "Align center",
            right: "Align right",
            justify: "Justify full"
          },
          color: {
            recent: "Recent Color",
            more: "More Color",
            background: "Background Color",
            foreground: "Text Color",
            transparent: "Transparent",
            setTransparent: "Set transparent",
            reset: "Reset",
            resetToDefault: "Reset to default",
            cpSelect: "Select"
          },
          shortcut: {
            shortcuts: "Keyboard shortcuts",
            close: "Close",
            textFormatting: "Text formatting",
            action: "Action",
            paragraphFormatting: "Paragraph formatting",
            documentStyle: "Document Style",
            extraKeys: "Extra keys"
          },
          help: {
            insertParagraph: "Insert Paragraph",
            undo: "Undoes the last command",
            redo: "Redoes the last command",
            tab: "Tab",
            untab: "Untab",
            bold: "Set a bold style",
            italic: "Set a italic style",
            underline: "Set a underline style",
            strikethrough: "Set a strikethrough style",
            removeFormat: "Clean a style",
            justifyLeft: "Set left align",
            justifyCenter: "Set center align",
            justifyRight: "Set right align",
            justifyFull: "Set full align",
            insertUnorderedList: "Toggle unordered list",
            insertOrderedList: "Toggle ordered list",
            outdent: "Outdent on current paragraph",
            indent: "Indent on current paragraph",
            formatPara: "Change current block's format as a paragraph(P tag)",
            formatH1: "Change current block's format as H1",
            formatH2: "Change current block's format as H2",
            formatH3: "Change current block's format as H3",
            formatH4: "Change current block's format as H4",
            formatH5: "Change current block's format as H5",
            formatH6: "Change current block's format as H6",
            insertHorizontalRule: "Insert horizontal rule",
            "linkDialog.show": "Show Link Dialog"
          },
          history: {
            undo: "Undo",
            redo: "Redo"
          },
          specialChar: {
            specialChar: "SPECIAL CHARACTERS",
            select: "Select Special characters"
          },
          output: {
            noSelection: "No Selection Made!"
          }
        }
      });
      var s = "function" == typeof define && o(2),
          r = ["sans-serif", "serif", "monospace", "cursive", "fantasy"];

      function a(t) {
        return -1 === n.a.inArray(t.toLowerCase(), r) ? "'" + t + "'" : t;
      }

      var l = navigator.userAgent,
          c = /MSIE|Trident/i.test(l);
      var d;

      if (c) {
        var _t2 = /MSIE (\d+[.]\d+)/.exec(l);

        _t2 && (d = parseFloat(_t2[1])), _t2 = /Trident\/.*rv:([0-9]{1,}[.0-9]{0,})/.exec(l), _t2 && (d = parseFloat(_t2[1]));
      }

      var h = /Edge\/\d+/.test(l);
      var u = !!window.CodeMirror;
      var p = "ontouchstart" in window || navigator.MaxTouchPoints > 0 || navigator.msMaxTouchPoints > 0,
          m = c ? "DOMCharacterDataModified DOMSubtreeModified DOMNodeInserted" : "input";
      var f = {
        isMac: navigator.appVersion.indexOf("Mac") > -1,
        isMSIE: c,
        isEdge: h,
        isFF: !h && /firefox/i.test(l),
        isPhantom: /PhantomJS/i.test(l),
        isWebkit: !h && /webkit/i.test(l),
        isChrome: !h && /chrome/i.test(l),
        isSafari: !h && /safari/i.test(l) && !/chrome/i.test(l),
        browserVersion: d,
        jqueryVersion: parseFloat(n.a.fn.jquery),
        isSupportAmd: s,
        isSupportTouch: p,
        hasCodeMirror: u,
        isFontInstalled: function isFontInstalled(t) {
          var e = "Comic Sans MS" === t ? "Courier New" : "Comic Sans MS";
          var o = document.createElement("canvas").getContext("2d");
          o.font = "200px '" + e + "'";
          var i = o.measureText("mmmmmmmmmmwwwww").width;
          return o.font = "200px " + a(t) + ', "' + e + '"', i !== o.measureText("mmmmmmmmmmwwwww").width;
        },
        isW3CRangeSupport: !!document.createRange,
        inputEventName: m,
        genericFontFamilies: r,
        validFontName: a
      };
      var g = 0;
      var b = {
        eq: function eq(t) {
          return function (e) {
            return t === e;
          };
        },
        eq2: function eq2(t, e) {
          return t === e;
        },
        peq2: function peq2(t) {
          return function (e, o) {
            return e[t] === o[t];
          };
        },
        ok: function ok() {
          return !0;
        },
        fail: function fail() {
          return !1;
        },
        self: function self(t) {
          return t;
        },
        not: function not(t) {
          return function () {
            return !t.apply(t, arguments);
          };
        },
        and: function and(t, e) {
          return function (o) {
            return t(o) && e(o);
          };
        },
        invoke: function invoke(t, e) {
          return function () {
            return t[e].apply(t, arguments);
          };
        },
        resetUniqueId: function resetUniqueId() {
          g = 0;
        },
        uniqueId: function uniqueId(t) {
          var e = ++g + "";
          return t ? t + e : e;
        },
        rect2bnd: function rect2bnd(t) {
          var e = n()(document);
          return {
            top: t.top + e.scrollTop(),
            left: t.left + e.scrollLeft(),
            width: t.right - t.left,
            height: t.bottom - t.top
          };
        },
        invertObject: function invertObject(t) {
          var e = {};

          for (var _o in t) {
            t.hasOwnProperty(_o) && (e[t[_o]] = _o);
          }

          return e;
        },
        namespaceToCamel: function namespaceToCamel(t, e) {
          return (e = e || "") + t.split(".").map(function (t) {
            return t.substring(0, 1).toUpperCase() + t.substring(1);
          }).join("");
        },
        debounce: function debounce(t, e, o) {
          var i;
          return function () {
            var n = this,
                s = arguments,
                r = function r() {
              i = null, o || t.apply(n, s);
            },
                a = o && !i;

            clearTimeout(i), i = setTimeout(r, e), a && t.apply(n, s);
          };
        },
        isValidUrl: function isValidUrl(t) {
          return /[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/gi.test(t);
        }
      };

      function v(t) {
        return t[0];
      }

      function k(t) {
        return t[t.length - 1];
      }

      function C(t) {
        return t.slice(1);
      }

      function w(t, e) {
        if (t && t.length && e) {
          if (t.indexOf) return -1 !== t.indexOf(e);
          if (t.contains) return t.contains(e);
        }

        return !1;
      }

      var y = {
        head: v,
        last: k,
        initial: function initial(t) {
          return t.slice(0, t.length - 1);
        },
        tail: C,
        prev: function prev(t, e) {
          if (t && t.length && e) {
            var _o2 = t.indexOf(e);

            return -1 === _o2 ? null : t[_o2 - 1];
          }

          return null;
        },
        next: function next(t, e) {
          if (t && t.length && e) {
            var _o3 = t.indexOf(e);

            return -1 === _o3 ? null : t[_o3 + 1];
          }

          return null;
        },
        find: function find(t, e) {
          for (var _o4 = 0, _i = t.length; _o4 < _i; _o4++) {
            var _i2 = t[_o4];
            if (e(_i2)) return _i2;
          }
        },
        contains: w,
        all: function all(t, e) {
          for (var _o5 = 0, _i3 = t.length; _o5 < _i3; _o5++) {
            if (!e(t[_o5])) return !1;
          }

          return !0;
        },
        sum: function sum(t, e) {
          return e = e || b.self, t.reduce(function (t, o) {
            return t + e(o);
          }, 0);
        },
        from: function from(t) {
          var e = [],
              o = t.length;
          var i = -1;

          for (; ++i < o;) {
            e[i] = t[i];
          }

          return e;
        },
        isEmpty: function isEmpty(t) {
          return !t || !t.length;
        },
        clusterBy: function clusterBy(t, e) {
          return t.length ? C(t).reduce(function (t, o) {
            var i = k(t);
            return e(k(i), o) ? i[i.length] = o : t[t.length] = [o], t;
          }, [[v(t)]]) : [];
        },
        compact: function compact(t) {
          var e = [];

          for (var _o6 = 0, _i4 = t.length; _o6 < _i4; _o6++) {
            t[_o6] && e.push(t[_o6]);
          }

          return e;
        },
        unique: function unique(t) {
          var e = [];

          for (var _o7 = 0, _i5 = t.length; _o7 < _i5; _o7++) {
            w(e, t[_o7]) || e.push(t[_o7]);
          }

          return e;
        }
      };
      var x = String.fromCharCode(160);

      function S(t) {
        return t && n()(t).hasClass("note-editable");
      }

      function $(t) {
        return t = t.toUpperCase(), function (e) {
          return e && e.nodeName.toUpperCase() === t;
        };
      }

      function I(t) {
        return t && 3 === t.nodeType;
      }

      function N(t) {
        return t && /^BR|^IMG|^HR|^IFRAME|^BUTTON|^INPUT|^AUDIO|^VIDEO|^EMBED/.test(t.nodeName.toUpperCase());
      }

      function T(t) {
        return !S(t) && t && /^DIV|^P|^LI|^H[1-7]/.test(t.nodeName.toUpperCase());
      }

      var E = $("PRE"),
          R = $("LI");
      var L = $("TABLE"),
          A = $("DATA");

      function P(t) {
        return !(z(t) || F(t) || D(t) || T(t) || L(t) || B(t) || A(t));
      }

      function F(t) {
        return t && /^UL|^OL/.test(t.nodeName.toUpperCase());
      }

      var D = $("HR");

      function H(t) {
        return t && /^TD|^TH/.test(t.nodeName.toUpperCase());
      }

      var B = $("BLOCKQUOTE");

      function z(t) {
        return H(t) || B(t) || S(t);
      }

      var M = $("A");
      var O = $("BODY");
      var U = f.isMSIE && f.browserVersion < 11 ? "&nbsp;" : "<br>";

      function j(t) {
        return I(t) ? t.nodeValue.length : t ? t.childNodes.length : 0;
      }

      function W(t) {
        var e = j(t);
        return 0 === e || !I(t) && 1 === e && t.innerHTML === U || !(!y.all(t.childNodes, I) || "" !== t.innerHTML);
      }

      function K(t) {
        N(t) || j(t) || (t.innerHTML = U);
      }

      function q(t, e) {
        for (; t;) {
          if (e(t)) return t;
          if (S(t)) break;
          t = t.parentNode;
        }

        return null;
      }

      function V(t, e) {
        e = e || b.fail;
        var o = [];
        return q(t, function (t) {
          return S(t) || o.push(t), e(t);
        }), o;
      }

      function _(t, e) {
        e = e || b.fail;
        var o = [];

        for (; t && !e(t);) {
          o.push(t), t = t.nextSibling;
        }

        return o;
      }

      function G(t, e) {
        var o = e.nextSibling;
        var i = e.parentNode;
        return o ? i.insertBefore(t, o) : i.appendChild(t), t;
      }

      function Z(t, e) {
        return n.a.each(e, function (e, o) {
          t.appendChild(o);
        }), t;
      }

      function Y(t) {
        return 0 === t.offset;
      }

      function Q(t) {
        return t.offset === j(t.node);
      }

      function X(t) {
        return Y(t) || Q(t);
      }

      function J(t, e) {
        for (; t && t !== e;) {
          if (0 !== et(t)) return !1;
          t = t.parentNode;
        }

        return !0;
      }

      function tt(t, e) {
        if (!e) return !1;

        for (; t && t !== e;) {
          if (et(t) !== j(t.parentNode) - 1) return !1;
          t = t.parentNode;
        }

        return !0;
      }

      function et(t) {
        var e = 0;

        for (; t = t.previousSibling;) {
          e += 1;
        }

        return e;
      }

      function ot(t) {
        return !!(t && t.childNodes && t.childNodes.length);
      }

      function it(t, e) {
        var o, i;

        if (0 === t.offset) {
          if (S(t.node)) return null;
          o = t.node.parentNode, i = et(t.node);
        } else ot(t.node) ? (o = t.node.childNodes[t.offset - 1], i = j(o)) : (o = t.node, i = e ? 0 : t.offset - 1);

        return {
          node: o,
          offset: i
        };
      }

      function nt(t, e) {
        var o, i;
        if (W(t.node)) return null;

        if (j(t.node) === t.offset) {
          if (S(t.node)) return null;
          o = t.node.parentNode, i = et(t.node) + 1;
        } else if (ot(t.node)) {
          if (o = t.node.childNodes[t.offset], i = 0, W(o)) return null;
        } else if (o = t.node, i = e ? j(t.node) : t.offset + 1, W(o)) return null;

        return {
          node: o,
          offset: i
        };
      }

      function st(t, e) {
        return t.node === e.node && t.offset === e.offset;
      }

      function rt(t, e) {
        var o = e && e.isSkipPaddingBlankHTML;
        var i = e && e.isNotSplitEdgePoint,
            n = e && e.isDiscardEmptySplits;

        if (n && (o = !0), X(t) && (I(t.node) || i)) {
          if (Y(t)) return t.node;
          if (Q(t)) return t.node.nextSibling;
        }

        if (I(t.node)) return t.node.splitText(t.offset);
        {
          var _e = t.node.childNodes[t.offset],
              _i6 = G(t.node.cloneNode(!1), t.node);

          return Z(_i6, _(_e)), o || (K(t.node), K(_i6)), n && (W(t.node) && ct(t.node), W(_i6)) ? (ct(_i6), t.node.nextSibling) : _i6;
        }
      }

      function at(t, e, o) {
        var i = V(e.node, b.eq(t));
        return i.length ? 1 === i.length ? rt(e, o) : i.reduce(function (t, i) {
          return t === e.node && (t = rt(e, o)), rt({
            node: i,
            offset: t ? et(t) : j(i)
          }, o);
        }) : null;
      }

      function lt(t) {
        return document.createElement(t);
      }

      function ct(t, e) {
        if (!t || !t.parentNode) return;
        if (t.removeNode) return t.removeNode(e);
        var o = t.parentNode;

        if (!e) {
          var _e2 = [];

          for (var _o8 = 0, _i7 = t.childNodes.length; _o8 < _i7; _o8++) {
            _e2.push(t.childNodes[_o8]);
          }

          for (var _i8 = 0, _n = _e2.length; _i8 < _n; _i8++) {
            o.insertBefore(_e2[_i8], t);
          }
        }

        o.removeChild(t);
      }

      var dt = $("TEXTAREA");

      function ht(t, e) {
        var o = dt(t[0]) ? t.val() : t.html();
        return e ? o.replace(/[\n\r]/g, "") : o;
      }

      var ut = {
        NBSP_CHAR: x,
        ZERO_WIDTH_NBSP_CHAR: "\uFEFF",
        blank: U,
        emptyPara: "<p>" + U + "</p>",
        makePredByNodeName: $,
        isEditable: S,
        isControlSizing: function isControlSizing(t) {
          return t && n()(t).hasClass("note-control-sizing");
        },
        isText: I,
        isElement: function isElement(t) {
          return t && 1 === t.nodeType;
        },
        isVoid: N,
        isPara: T,
        isPurePara: function isPurePara(t) {
          return T(t) && !R(t);
        },
        isHeading: function isHeading(t) {
          return t && /^H[1-7]/.test(t.nodeName.toUpperCase());
        },
        isInline: P,
        isBlock: b.not(P),
        isBodyInline: function isBodyInline(t) {
          return P(t) && !q(t, T);
        },
        isBody: O,
        isParaInline: function isParaInline(t) {
          return P(t) && !!q(t, T);
        },
        isPre: E,
        isList: F,
        isTable: L,
        isData: A,
        isCell: H,
        isBlockquote: B,
        isBodyContainer: z,
        isAnchor: M,
        isDiv: $("DIV"),
        isLi: R,
        isBR: $("BR"),
        isSpan: $("SPAN"),
        isB: $("B"),
        isU: $("U"),
        isS: $("S"),
        isI: $("I"),
        isImg: $("IMG"),
        isTextarea: dt,
        deepestChildIsEmpty: function deepestChildIsEmpty(t) {
          do {
            if (null === t.firstElementChild || "" === t.firstElementChild.innerHTML) break;
          } while (t = t.firstElementChild);

          return W(t);
        },
        isEmpty: W,
        isEmptyAnchor: b.and(M, W),
        isClosestSibling: function isClosestSibling(t, e) {
          return t.nextSibling === e || t.previousSibling === e;
        },
        withClosestSiblings: function withClosestSiblings(t, e) {
          e = e || b.ok;
          var o = [];
          return t.previousSibling && e(t.previousSibling) && o.push(t.previousSibling), o.push(t), t.nextSibling && e(t.nextSibling) && o.push(t.nextSibling), o;
        },
        nodeLength: j,
        isLeftEdgePoint: Y,
        isRightEdgePoint: Q,
        isEdgePoint: X,
        isLeftEdgeOf: J,
        isRightEdgeOf: tt,
        isLeftEdgePointOf: function isLeftEdgePointOf(t, e) {
          return Y(t) && J(t.node, e);
        },
        isRightEdgePointOf: function isRightEdgePointOf(t, e) {
          return Q(t) && tt(t.node, e);
        },
        prevPoint: it,
        nextPoint: nt,
        isSamePoint: st,
        isVisiblePoint: function isVisiblePoint(t) {
          if (I(t.node) || !ot(t.node) || W(t.node)) return !0;
          var e = t.node.childNodes[t.offset - 1],
              o = t.node.childNodes[t.offset];
          return !(e && !N(e) || o && !N(o));
        },
        prevPointUntil: function prevPointUntil(t, e) {
          for (; t;) {
            if (e(t)) return t;
            t = it(t);
          }

          return null;
        },
        nextPointUntil: function nextPointUntil(t, e) {
          for (; t;) {
            if (e(t)) return t;
            t = nt(t);
          }

          return null;
        },
        isCharPoint: function isCharPoint(t) {
          if (!I(t.node)) return !1;
          var e = t.node.nodeValue.charAt(t.offset - 1);
          return e && " " !== e && e !== x;
        },
        isSpacePoint: function isSpacePoint(t) {
          if (!I(t.node)) return !1;
          var e = t.node.nodeValue.charAt(t.offset - 1);
          return " " === e || e === x;
        },
        walkPoint: function walkPoint(t, e, o, i) {
          var n = t;

          for (; n && (o(n), !st(n, e));) {
            n = nt(n, i && t.node !== n.node && e.node !== n.node);
          }
        },
        ancestor: q,
        singleChildAncestor: function singleChildAncestor(t, e) {
          for (t = t.parentNode; t && 1 === j(t);) {
            if (e(t)) return t;
            if (S(t)) break;
            t = t.parentNode;
          }

          return null;
        },
        listAncestor: V,
        lastAncestor: function lastAncestor(t, e) {
          var o = V(t);
          return y.last(o.filter(e));
        },
        listNext: _,
        listPrev: function listPrev(t, e) {
          e = e || b.fail;
          var o = [];

          for (; t && !e(t);) {
            o.push(t), t = t.previousSibling;
          }

          return o;
        },
        listDescendant: function listDescendant(t, e) {
          var o = [];
          return e = e || b.ok, function i(n) {
            t !== n && e(n) && o.push(n);

            for (var _t3 = 0, _e3 = n.childNodes.length; _t3 < _e3; _t3++) {
              i(n.childNodes[_t3]);
            }
          }(t), o;
        },
        commonAncestor: function commonAncestor(t, e) {
          var o = V(t);

          for (var _t4 = e; _t4; _t4 = _t4.parentNode) {
            if (o.indexOf(_t4) > -1) return _t4;
          }

          return null;
        },
        wrap: function wrap(t, e) {
          var o = t.parentNode,
              i = n()("<" + e + ">")[0];
          return o.insertBefore(i, t), i.appendChild(t), i;
        },
        insertAfter: G,
        appendChildNodes: Z,
        position: et,
        hasChildren: ot,
        makeOffsetPath: function makeOffsetPath(t, e) {
          return V(e, b.eq(t)).map(et).reverse();
        },
        fromOffsetPath: function fromOffsetPath(t, e) {
          var o = t;

          for (var _t5 = 0, _i9 = e.length; _t5 < _i9; _t5++) {
            o = o.childNodes.length <= e[_t5] ? o.childNodes[o.childNodes.length - 1] : o.childNodes[e[_t5]];
          }

          return o;
        },
        splitTree: at,
        splitPoint: function splitPoint(t, e) {
          var o = e ? T : z,
              i = V(t.node, o),
              n = y.last(i) || t.node;
          var s, r;
          o(n) ? (s = i[i.length - 2], r = n) : (s = n, r = s.parentNode);
          var a = s && at(s, t, {
            isSkipPaddingBlankHTML: e,
            isNotSplitEdgePoint: e
          });
          return a || r !== t.node || (a = t.node.childNodes[t.offset]), {
            rightNode: a,
            container: r
          };
        },
        create: lt,
        createText: function createText(t) {
          return document.createTextNode(t);
        },
        remove: ct,
        removeWhile: function removeWhile(t, e) {
          for (; t && !S(t) && e(t);) {
            var _e4 = t.parentNode;
            ct(t), t = _e4;
          }
        },
        replace: function replace(t, e) {
          if (t.nodeName.toUpperCase() === e.toUpperCase()) return t;
          var o = lt(e);
          return t.style.cssText && (o.style.cssText = t.style.cssText), Z(o, y.from(t.childNodes)), G(o, t), ct(t), o;
        },
        html: function html(t, e) {
          var o = ht(t);

          if (e) {
            var _t6 = /<(\/?)(\b(?!!)[^>\s]*)(.*?)(\s*\/?>)/g;
            o = o.replace(_t6, function (t, e, o) {
              o = o.toUpperCase();
              var i = /^DIV|^TD|^TH|^P|^LI|^H[1-7]/.test(o) && !!e,
                  n = /^BLOCKQUOTE|^TABLE|^TBODY|^TR|^HR|^UL|^OL/.test(o);
              return t + (i || n ? "\n" : "");
            }), o = o.trim();
          }

          return o;
        },
        value: ht,
        posFromPlaceholder: function posFromPlaceholder(t) {
          var e = n()(t),
              o = e.offset(),
              i = e.outerHeight(!0);
          return {
            left: o.left,
            top: o.top + i
          };
        },
        attachEvents: function attachEvents(t, e) {
          Object.keys(e).forEach(function (o) {
            t.on(o, e[o]);
          });
        },
        detachEvents: function detachEvents(t, e) {
          Object.keys(e).forEach(function (o) {
            t.off(o, e[o]);
          });
        },
        isCustomStyleTag: function isCustomStyleTag(t) {
          return t && !I(t) && y.contains(t.classList, "note-styletag");
        }
      };

      var pt =
      /*#__PURE__*/
      function () {
        function pt(t, e) {
          this.$note = t, this.memos = {}, this.modules = {}, this.layoutInfo = {}, this.options = n.a.extend(!0, {}, e), n.a.summernote.ui = n.a.summernote.ui_template(this.options), this.ui = n.a.summernote.ui, this.initialize();
        }

        var _proto2 = pt.prototype;

        _proto2.initialize = function initialize() {
          return this.layoutInfo = this.ui.createLayout(this.$note), this._initialize(), this.$note.hide(), this;
        };

        _proto2.destroy = function destroy() {
          this._destroy(), this.$note.removeData("summernote"), this.ui.removeLayout(this.$note, this.layoutInfo);
        };

        _proto2.reset = function reset() {
          var t = this.isDisabled();
          this.code(ut.emptyPara), this._destroy(), this._initialize(), t && this.disable();
        };

        _proto2._initialize = function _initialize() {
          var _this = this;

          this.options.id = b.uniqueId(n.a.now()), this.options.container = this.options.container || this.layoutInfo.editor;
          var t = n.a.extend({}, this.options.buttons);
          Object.keys(t).forEach(function (e) {
            _this.memo("button." + e, t[e]);
          });
          var e = n.a.extend({}, this.options.modules, n.a.summernote.plugins || {});
          Object.keys(e).forEach(function (t) {
            _this.module(t, e[t], !0);
          }), Object.keys(this.modules).forEach(function (t) {
            _this.initializeModule(t);
          });
        };

        _proto2._destroy = function _destroy() {
          var _this2 = this;

          Object.keys(this.modules).reverse().forEach(function (t) {
            _this2.removeModule(t);
          }), Object.keys(this.memos).forEach(function (t) {
            _this2.removeMemo(t);
          }), this.triggerEvent("destroy", this);
        };

        _proto2.code = function code(t) {
          var e = this.invoke("codeview.isActivated");
          if (void 0 === t) return this.invoke("codeview.sync"), e ? this.layoutInfo.codable.val() : this.layoutInfo.editable.html();
          e ? this.layoutInfo.codable.val(t) : this.layoutInfo.editable.html(t), this.$note.val(t), this.triggerEvent("change", t, this.layoutInfo.editable);
        };

        _proto2.isDisabled = function isDisabled() {
          return "false" === this.layoutInfo.editable.attr("contenteditable");
        };

        _proto2.enable = function enable() {
          this.layoutInfo.editable.attr("contenteditable", !0), this.invoke("toolbar.activate", !0), this.triggerEvent("disable", !1), this.options.editing = !0;
        };

        _proto2.disable = function disable() {
          this.invoke("codeview.isActivated") && this.invoke("codeview.deactivate"), this.layoutInfo.editable.attr("contenteditable", !1), this.options.editing = !1, this.invoke("toolbar.deactivate", !0), this.triggerEvent("disable", !0);
        };

        _proto2.triggerEvent = function triggerEvent() {
          var t = y.head(arguments),
              e = y.tail(y.from(arguments)),
              o = this.options.callbacks[b.namespaceToCamel(t, "on")];
          o && o.apply(this.$note[0], e), this.$note.trigger("summernote." + t, e);
        };

        _proto2.initializeModule = function initializeModule(t) {
          var e = this.modules[t];
          e.shouldInitialize = e.shouldInitialize || b.ok, e.shouldInitialize() && (e.initialize && e.initialize(), e.events && ut.attachEvents(this.$note, e.events));
        };

        _proto2.module = function module(t, e, o) {
          if (1 === arguments.length) return this.modules[t];
          this.modules[t] = new e(this), o || this.initializeModule(t);
        };

        _proto2.removeModule = function removeModule(t) {
          var e = this.modules[t];
          e.shouldInitialize() && (e.events && ut.detachEvents(this.$note, e.events), e.destroy && e.destroy()), delete this.modules[t];
        };

        _proto2.memo = function memo(t, e) {
          if (1 === arguments.length) return this.memos[t];
          this.memos[t] = e;
        };

        _proto2.removeMemo = function removeMemo(t) {
          this.memos[t] && this.memos[t].destroy && this.memos[t].destroy(), delete this.memos[t];
        };

        _proto2.createInvokeHandlerAndUpdateState = function createInvokeHandlerAndUpdateState(t, e) {
          var _this3 = this;

          return function (o) {
            _this3.createInvokeHandler(t, e)(o), _this3.invoke("buttons.updateCurrentStyle");
          };
        };

        _proto2.createInvokeHandler = function createInvokeHandler(t, e) {
          var _this4 = this;

          return function (o) {
            o.preventDefault();
            var i = n()(o.target);

            _this4.invoke(t, e || i.closest("[data-value]").data("value"), i);
          };
        };

        _proto2.invoke = function invoke() {
          var t = y.head(arguments),
              e = y.tail(y.from(arguments)),
              o = t.split("."),
              i = o.length > 1,
              n = i && y.head(o),
              s = i ? y.last(o) : y.head(o),
              r = this.modules[n || "editor"];
          return !n && this[s] ? this[s].apply(this, e) : r && r[s] && r.shouldInitialize() ? r[s].apply(r, e) : void 0;
        };

        return pt;
      }();

      function mt(t, e) {
        var o,
            i = t.parentElement();
        var n = document.body.createTextRange();
        var s;
        var r = y.from(i.childNodes);

        for (o = 0; o < r.length; o++) {
          if (!ut.isText(r[o])) {
            if (n.moveToElementText(r[o]), n.compareEndPoints("StartToStart", t) >= 0) break;
            s = r[o];
          }
        }

        if (0 !== o && ut.isText(r[o - 1])) {
          var _n2 = document.body.createTextRange();

          var _r = null;
          _n2.moveToElementText(s || i), _n2.collapse(!s), _r = s ? s.nextSibling : i.firstChild;

          var _a = t.duplicate();

          _a.setEndPoint("StartToStart", _n2);

          var _l = _a.text.replace(/[\r\n]/g, "").length;

          for (; _l > _r.nodeValue.length && _r.nextSibling;) {
            _l -= _r.nodeValue.length, _r = _r.nextSibling;
          }

          _r.nodeValue;
          e && _r.nextSibling && ut.isText(_r.nextSibling) && _l === _r.nodeValue.length && (_l -= _r.nodeValue.length, _r = _r.nextSibling), i = _r, o = _l;
        }

        return {
          cont: i,
          offset: o
        };
      }

      function ft(t) {
        var e = function e(t, o) {
          var i, n;

          if (ut.isText(t)) {
            var _e5 = ut.listPrev(t, b.not(ut.isText)),
                _s = y.last(_e5).previousSibling;

            i = _s || t.parentNode, o += y.sum(y.tail(_e5), ut.nodeLength), n = !_s;
          } else {
            if (i = t.childNodes[o] || t, ut.isText(i)) return e(i, 0);
            o = 0, n = !1;
          }

          return {
            node: i,
            collapseToStart: n,
            offset: o
          };
        },
            o = document.body.createTextRange(),
            i = e(t.node, t.offset);

        return o.moveToElementText(i.node), o.collapse(i.collapseToStart), o.moveStart("character", i.offset), o;
      }

      n.a.fn.extend({
        summernote: function summernote() {
          var t = n.a.type(y.head(arguments)),
              e = "string" === t,
              o = "object" === t,
              i = n.a.extend({}, n.a.summernote.options, o ? y.head(arguments) : {});
          i.langInfo = n.a.extend(!0, {}, n.a.summernote.lang["en-US"], n.a.summernote.lang[i.lang]), i.icons = n.a.extend(!0, {}, n.a.summernote.options.icons, i.icons), i.tooltip = "auto" === i.tooltip ? !f.isSupportTouch : i.tooltip, this.each(function (t, e) {
            var o = n()(e);

            if (!o.data("summernote")) {
              var _t7 = new pt(o, i);

              o.data("summernote", _t7), o.data("summernote").triggerEvent("init", _t7.layoutInfo);
            }
          });
          var s = this.first();

          if (s.length) {
            var _t8 = s.data("summernote");

            if (e) return _t8.invoke.apply(_t8, y.from(arguments));
            i.focus && _t8.invoke("editor.focus");
          }

          return this;
        }
      });

      var gt =
      /*#__PURE__*/
      function () {
        function gt(t, e, o, i) {
          this.sc = t, this.so = e, this.ec = o, this.eo = i, this.isOnEditable = this.makeIsOn(ut.isEditable), this.isOnList = this.makeIsOn(ut.isList), this.isOnAnchor = this.makeIsOn(ut.isAnchor), this.isOnCell = this.makeIsOn(ut.isCell), this.isOnData = this.makeIsOn(ut.isData);
        }

        var _proto3 = gt.prototype;

        _proto3.nativeRange = function nativeRange() {
          if (f.isW3CRangeSupport) {
            var _t9 = document.createRange();

            return _t9.setStart(this.sc, this.sc.data && this.so > this.sc.data.length ? 0 : this.so), _t9.setEnd(this.ec, this.sc.data ? Math.min(this.eo, this.sc.data.length) : this.eo), _t9;
          }

          {
            var _t10 = ft({
              node: this.sc,
              offset: this.so
            });

            return _t10.setEndPoint("EndToEnd", ft({
              node: this.ec,
              offset: this.eo
            })), _t10;
          }
        };

        _proto3.getPoints = function getPoints() {
          return {
            sc: this.sc,
            so: this.so,
            ec: this.ec,
            eo: this.eo
          };
        };

        _proto3.getStartPoint = function getStartPoint() {
          return {
            node: this.sc,
            offset: this.so
          };
        };

        _proto3.getEndPoint = function getEndPoint() {
          return {
            node: this.ec,
            offset: this.eo
          };
        };

        _proto3.select = function select() {
          var t = this.nativeRange();

          if (f.isW3CRangeSupport) {
            var _e6 = document.getSelection();

            _e6.rangeCount > 0 && _e6.removeAllRanges(), _e6.addRange(t);
          } else t.select();

          return this;
        };

        _proto3.scrollIntoView = function scrollIntoView(t) {
          var e = n()(t).height();
          return t.scrollTop + e < this.sc.offsetTop && (t.scrollTop += Math.abs(t.scrollTop + e - this.sc.offsetTop)), this;
        };

        _proto3.normalize = function normalize() {
          var t = function t(_t11, e) {
            if (!_t11) return _t11;
            if (ut.isVisiblePoint(_t11) && (!ut.isEdgePoint(_t11) || ut.isRightEdgePoint(_t11) && !e || ut.isLeftEdgePoint(_t11) && e || ut.isRightEdgePoint(_t11) && e && ut.isVoid(_t11.node.nextSibling) || ut.isLeftEdgePoint(_t11) && !e && ut.isVoid(_t11.node.previousSibling) || ut.isBlock(_t11.node) && ut.isEmpty(_t11.node))) return _t11;
            var o = ut.ancestor(_t11.node, ut.isBlock);
            var i = !1;

            if (!i) {
              var _n3 = ut.prevPoint(_t11) || {
                node: null
              };

              i = (ut.isLeftEdgePointOf(_t11, o) || ut.isVoid(_n3.node)) && !e;
            }

            var n = !1;

            if (!n) {
              var _i10 = ut.nextPoint(_t11) || {
                node: null
              };

              n = (ut.isRightEdgePointOf(_t11, o) || ut.isVoid(_i10.node)) && e;
            }

            if (i || n) {
              if (ut.isVisiblePoint(_t11)) return _t11;
              e = !e;
            }

            return (e ? ut.nextPointUntil(ut.nextPoint(_t11), ut.isVisiblePoint) : ut.prevPointUntil(ut.prevPoint(_t11), ut.isVisiblePoint)) || _t11;
          },
              e = t(this.getEndPoint(), !1),
              o = this.isCollapsed() ? e : t(this.getStartPoint(), !0);

          return new gt(o.node, o.offset, e.node, e.offset);
        };

        _proto3.nodes = function nodes(t, e) {
          t = t || b.ok;
          var o = e && e.includeAncestor,
              i = e && e.fullyContains,
              n = this.getStartPoint(),
              s = this.getEndPoint(),
              r = [],
              a = [];
          return ut.walkPoint(n, s, function (e) {
            if (ut.isEditable(e.node)) return;
            var n;
            i ? (ut.isLeftEdgePoint(e) && a.push(e.node), ut.isRightEdgePoint(e) && y.contains(a, e.node) && (n = e.node)) : n = o ? ut.ancestor(e.node, t) : e.node, n && t(n) && r.push(n);
          }, !0), y.unique(r);
        };

        _proto3.commonAncestor = function commonAncestor() {
          return ut.commonAncestor(this.sc, this.ec);
        };

        _proto3.expand = function expand(t) {
          var e = ut.ancestor(this.sc, t),
              o = ut.ancestor(this.ec, t);
          if (!e && !o) return new gt(this.sc, this.so, this.ec, this.eo);
          var i = this.getPoints();
          return e && (i.sc = e, i.so = 0), o && (i.ec = o, i.eo = ut.nodeLength(o)), new gt(i.sc, i.so, i.ec, i.eo);
        };

        _proto3.collapse = function collapse(t) {
          return t ? new gt(this.sc, this.so, this.sc, this.so) : new gt(this.ec, this.eo, this.ec, this.eo);
        };

        _proto3.splitText = function splitText() {
          var t = this.sc === this.ec,
              e = this.getPoints();
          return ut.isText(this.ec) && !ut.isEdgePoint(this.getEndPoint()) && this.ec.splitText(this.eo), ut.isText(this.sc) && !ut.isEdgePoint(this.getStartPoint()) && (e.sc = this.sc.splitText(this.so), e.so = 0, t && (e.ec = e.sc, e.eo = this.eo - this.so)), new gt(e.sc, e.so, e.ec, e.eo);
        };

        _proto3.deleteContents = function deleteContents() {
          if (this.isCollapsed()) return this;
          var t = this.splitText(),
              e = t.nodes(null, {
            fullyContains: !0
          }),
              o = ut.prevPointUntil(t.getStartPoint(), function (t) {
            return !y.contains(e, t.node);
          }),
              i = [];
          return n.a.each(e, function (t, e) {
            var n = e.parentNode;
            o.node !== n && 1 === ut.nodeLength(n) && i.push(n), ut.remove(e, !1);
          }), n.a.each(i, function (t, e) {
            ut.remove(e, !1);
          }), new gt(o.node, o.offset, o.node, o.offset).normalize();
        };

        _proto3.makeIsOn = function makeIsOn(t) {
          return function () {
            var e = ut.ancestor(this.sc, t);
            return !!e && e === ut.ancestor(this.ec, t);
          };
        };

        _proto3.isLeftEdgeOf = function isLeftEdgeOf(t) {
          if (!ut.isLeftEdgePoint(this.getStartPoint())) return !1;
          var e = ut.ancestor(this.sc, t);
          return e && ut.isLeftEdgeOf(this.sc, e);
        };

        _proto3.isCollapsed = function isCollapsed() {
          return this.sc === this.ec && this.so === this.eo;
        };

        _proto3.wrapBodyInlineWithPara = function wrapBodyInlineWithPara() {
          if (ut.isBodyContainer(this.sc) && ut.isEmpty(this.sc)) return this.sc.innerHTML = ut.emptyPara, new gt(this.sc.firstChild, 0, this.sc.firstChild, 0);
          var t = this.normalize();
          if (ut.isParaInline(this.sc) || ut.isPara(this.sc)) return t;
          var e;

          if (ut.isInline(t.sc)) {
            var _o9 = ut.listAncestor(t.sc, b.not(ut.isInline));

            e = y.last(_o9), ut.isInline(e) || (e = _o9[_o9.length - 2] || t.sc.childNodes[t.so]);
          } else e = t.sc.childNodes[t.so > 0 ? t.so - 1 : 0];

          if (e) {
            var _t12 = ut.listPrev(e, ut.isParaInline).reverse();

            if (_t12 = _t12.concat(ut.listNext(e.nextSibling, ut.isParaInline)), _t12.length) {
              var _e7 = ut.wrap(y.head(_t12), "p");

              ut.appendChildNodes(_e7, y.tail(_t12));
            }
          }

          return this.normalize();
        };

        _proto3.insertNode = function insertNode(t) {
          var e = this;
          (ut.isText(t) || ut.isInline(t)) && (e = this.wrapBodyInlineWithPara().deleteContents());
          var o = ut.splitPoint(e.getStartPoint(), ut.isInline(t));
          return o.rightNode ? o.rightNode.parentNode.insertBefore(t, o.rightNode) : o.container.appendChild(t), t;
        };

        _proto3.pasteHTML = function pasteHTML(t) {
          t = n.a.trim(t);
          var e = n()("<div></div>").html(t)[0];
          var o = y.from(e.childNodes);
          var i = this;
          return i.so >= 0 && (o = o.reverse()), o = o.map(function (t) {
            return i.insertNode(t);
          }), i.so > 0 && (o = o.reverse()), o;
        };

        _proto3.toString = function toString() {
          var t = this.nativeRange();
          return f.isW3CRangeSupport ? t.toString() : t.text;
        };

        _proto3.getWordRange = function getWordRange(t) {
          var e = this.getEndPoint();
          if (!ut.isCharPoint(e)) return this;
          var o = ut.prevPointUntil(e, function (t) {
            return !ut.isCharPoint(t);
          });
          return t && (e = ut.nextPointUntil(e, function (t) {
            return !ut.isCharPoint(t);
          })), new gt(o.node, o.offset, e.node, e.offset);
        };

        _proto3.getWordsRange = function getWordsRange(t) {
          var e = this.getEndPoint(),
              o = function o(t) {
            return !ut.isCharPoint(t) && !ut.isSpacePoint(t);
          };

          if (o(e)) return this;
          var i = ut.prevPointUntil(e, o);
          return t && (e = ut.nextPointUntil(e, o)), new gt(i.node, i.offset, e.node, e.offset);
        };

        _proto3.getWordsMatchRange = function getWordsMatchRange(t) {
          var e = this.getEndPoint(),
              o = ut.prevPointUntil(e, function (o) {
            if (!ut.isCharPoint(o) && !ut.isSpacePoint(o)) return !0;
            var i = new gt(o.node, o.offset, e.node, e.offset),
                n = t.exec(i.toString());
            return n && 0 === n.index;
          }),
              i = new gt(o.node, o.offset, e.node, e.offset),
              n = i.toString(),
              s = t.exec(n);
          return s && s[0].length === n.length ? i : null;
        };

        _proto3.bookmark = function bookmark(t) {
          return {
            s: {
              path: ut.makeOffsetPath(t, this.sc),
              offset: this.so
            },
            e: {
              path: ut.makeOffsetPath(t, this.ec),
              offset: this.eo
            }
          };
        };

        _proto3.paraBookmark = function paraBookmark(t) {
          return {
            s: {
              path: y.tail(ut.makeOffsetPath(y.head(t), this.sc)),
              offset: this.so
            },
            e: {
              path: y.tail(ut.makeOffsetPath(y.last(t), this.ec)),
              offset: this.eo
            }
          };
        };

        _proto3.getClientRects = function getClientRects() {
          return this.nativeRange().getClientRects();
        };

        return gt;
      }();

      var bt = {
        create: function create(t, e, o, i) {
          if (4 === arguments.length) return new gt(t, e, o, i);
          if (2 === arguments.length) return new gt(t, e, o = t, i = e);
          {
            var _t13 = this.createFromSelection();

            if (!_t13 && 1 === arguments.length) {
              var _t14 = arguments[0];
              return ut.isEditable(_t14) && (_t14 = _t14.lastChild), this.createFromBodyElement(_t14, ut.emptyPara === arguments[0].innerHTML);
            }

            return _t13;
          }
        },
        createFromBodyElement: function createFromBodyElement(t, e) {
          if (e === void 0) {
            e = !1;
          }

          return this.createFromNode(t).collapse(e);
        },
        createFromSelection: function createFromSelection() {
          var t, e, o, i;

          if (f.isW3CRangeSupport) {
            var _n4 = document.getSelection();

            if (!_n4 || 0 === _n4.rangeCount) return null;
            if (ut.isBody(_n4.anchorNode)) return null;

            var _s2 = _n4.getRangeAt(0);

            t = _s2.startContainer, e = _s2.startOffset, o = _s2.endContainer, i = _s2.endOffset;
          } else {
            var _n5 = document.selection.createRange(),
                _s3 = _n5.duplicate();

            _s3.collapse(!1);

            var _r2 = _n5;

            _r2.collapse(!0);

            var _a2 = mt(_r2, !0),
                _l2 = mt(_s3, !1);

            ut.isText(_a2.node) && ut.isLeftEdgePoint(_a2) && ut.isTextNode(_l2.node) && ut.isRightEdgePoint(_l2) && _l2.node.nextSibling === _a2.node && (_a2 = _l2), t = _a2.cont, e = _a2.offset, o = _l2.cont, i = _l2.offset;
          }

          return new gt(t, e, o, i);
        },
        createFromNode: function createFromNode(t) {
          var e = t,
              o = 0,
              i = t,
              n = ut.nodeLength(i);
          return ut.isVoid(e) && (o = ut.listPrev(e).length - 1, e = e.parentNode), ut.isBR(i) ? (n = ut.listPrev(i).length - 1, i = i.parentNode) : ut.isVoid(i) && (n = ut.listPrev(i).length, i = i.parentNode), this.create(e, o, i, n);
        },
        createFromNodeBefore: function createFromNodeBefore(t) {
          return this.createFromNode(t).collapse(!0);
        },
        createFromNodeAfter: function createFromNodeAfter(t) {
          return this.createFromNode(t).collapse();
        },
        createFromBookmark: function createFromBookmark(t, e) {
          var o = ut.fromOffsetPath(t, e.s.path),
              i = e.s.offset,
              n = ut.fromOffsetPath(t, e.e.path),
              s = e.e.offset;
          return new gt(o, i, n, s);
        },
        createFromParaBookmark: function createFromParaBookmark(t, e) {
          var o = t.s.offset,
              i = t.e.offset,
              n = ut.fromOffsetPath(y.head(e), t.s.path),
              s = ut.fromOffsetPath(y.last(e), t.e.path);
          return new gt(n, o, s, i);
        }
      };
      var vt = {
        BACKSPACE: 8,
        TAB: 9,
        ENTER: 13,
        SPACE: 32,
        DELETE: 46,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
        NUM0: 48,
        NUM1: 49,
        NUM2: 50,
        NUM3: 51,
        NUM4: 52,
        NUM5: 53,
        NUM6: 54,
        NUM7: 55,
        NUM8: 56,
        B: 66,
        E: 69,
        I: 73,
        J: 74,
        K: 75,
        L: 76,
        R: 82,
        S: 83,
        U: 85,
        V: 86,
        Y: 89,
        Z: 90,
        SLASH: 191,
        LEFTBRACKET: 219,
        BACKSLASH: 220,
        RIGHTBRACKET: 221,
        HOME: 36,
        END: 35,
        PAGEUP: 33,
        PAGEDOWN: 34
      };
      var kt = {
        isEdit: function isEdit(t) {
          return y.contains([vt.BACKSPACE, vt.TAB, vt.ENTER, vt.SPACE, vt.DELETE], t);
        },
        isMove: function isMove(t) {
          return y.contains([vt.LEFT, vt.UP, vt.RIGHT, vt.DOWN], t);
        },
        isNavigation: function isNavigation(t) {
          return y.contains([vt.HOME, vt.END, vt.PAGEUP, vt.PAGEDOWN], t);
        },
        nameFromCode: b.invertObject(vt),
        code: vt
      };

      var Ct =
      /*#__PURE__*/
      function () {
        function Ct(t) {
          this.stack = [], this.stackOffset = -1, this.$editable = t, this.editable = t[0];
        }

        var _proto4 = Ct.prototype;

        _proto4.makeSnapshot = function makeSnapshot() {
          var t = bt.create(this.editable);
          return {
            contents: this.$editable.html(),
            bookmark: t && t.isOnEditable() ? t.bookmark(this.editable) : {
              s: {
                path: [],
                offset: 0
              },
              e: {
                path: [],
                offset: 0
              }
            }
          };
        };

        _proto4.applySnapshot = function applySnapshot(t) {
          null !== t.contents && this.$editable.html(t.contents), null !== t.bookmark && bt.createFromBookmark(this.editable, t.bookmark).select();
        };

        _proto4.rewind = function rewind() {
          this.$editable.html() !== this.stack[this.stackOffset].contents && this.recordUndo(), this.stackOffset = 0, this.applySnapshot(this.stack[this.stackOffset]);
        };

        _proto4.commit = function commit() {
          this.stack = [], this.stackOffset = -1, this.recordUndo();
        };

        _proto4.reset = function reset() {
          this.stack = [], this.stackOffset = -1, this.$editable.html(""), this.recordUndo();
        };

        _proto4.undo = function undo() {
          this.$editable.html() !== this.stack[this.stackOffset].contents && this.recordUndo(), this.stackOffset > 0 && (this.stackOffset--, this.applySnapshot(this.stack[this.stackOffset]));
        };

        _proto4.redo = function redo() {
          this.stack.length - 1 > this.stackOffset && (this.stackOffset++, this.applySnapshot(this.stack[this.stackOffset]));
        };

        _proto4.recordUndo = function recordUndo() {
          this.stackOffset++, this.stack.length > this.stackOffset && (this.stack = this.stack.slice(0, this.stackOffset)), this.stack.push(this.makeSnapshot());
        };

        return Ct;
      }();

      var wt =
      /*#__PURE__*/
      function () {
        function wt() {}

        var _proto5 = wt.prototype;

        _proto5.jQueryCSS = function jQueryCSS(t, e) {
          if (f.jqueryVersion < 1.9) {
            var _o10 = {};
            return n.a.each(e, function (e, i) {
              _o10[i] = t.css(i);
            }), _o10;
          }

          return t.css(e);
        };

        _proto5.fromNode = function fromNode(t) {
          var e = this.jQueryCSS(t, ["font-family", "font-size", "text-align", "list-style-type", "line-height"]) || {},
              o = t[0].style.fontSize || e["font-size"];
          return e["font-size"] = parseInt(o, 10), e["font-size-unit"] = o.match(/[a-z%]+$/), e;
        };

        _proto5.stylePara = function stylePara(t, e) {
          n.a.each(t.nodes(ut.isPara, {
            includeAncestor: !0
          }), function (t, o) {
            n()(o).css(e);
          });
        };

        _proto5.styleNodes = function styleNodes(t, e) {
          t = t.splitText();
          var o = e && e.nodeName || "SPAN",
              i = !(!e || !e.expandClosestSibling),
              s = !(!e || !e.onlyPartialContains);
          if (t.isCollapsed()) return [t.insertNode(ut.create(o))];
          var r = ut.makePredByNodeName(o);
          var a = t.nodes(ut.isText, {
            fullyContains: !0
          }).map(function (t) {
            return ut.singleChildAncestor(t, r) || ut.wrap(t, o);
          });

          if (i) {
            if (s) {
              var _e8 = t.nodes();

              r = b.and(r, function (t) {
                return y.contains(_e8, t);
              });
            }

            return a.map(function (t) {
              var e = ut.withClosestSiblings(t, r),
                  o = y.head(e),
                  i = y.tail(e);
              return n.a.each(i, function (t, e) {
                ut.appendChildNodes(o, e.childNodes), ut.remove(e);
              }), y.head(e);
            });
          }

          return a;
        };

        _proto5.current = function current(t) {
          var e = n()(ut.isElement(t.sc) ? t.sc : t.sc.parentNode);
          var o = this.fromNode(e);

          try {
            o = n.a.extend(o, {
              "font-bold": document.queryCommandState("bold") ? "bold" : "normal",
              "font-italic": document.queryCommandState("italic") ? "italic" : "normal",
              "font-underline": document.queryCommandState("underline") ? "underline" : "normal",
              "font-subscript": document.queryCommandState("subscript") ? "subscript" : "normal",
              "font-superscript": document.queryCommandState("superscript") ? "superscript" : "normal",
              "font-strikethrough": document.queryCommandState("strikethrough") ? "strikethrough" : "normal",
              "font-family": document.queryCommandValue("fontname") || o["font-family"]
            });
          } catch (t) {}

          if (t.isOnList()) {
            var _t15 = ["circle", "disc", "disc-leading-zero", "square"].indexOf(o["list-style-type"]) > -1;

            o["list-style"] = _t15 ? "unordered" : "ordered";
          } else o["list-style"] = "none";

          var i = ut.ancestor(t.sc, ut.isPara);
          if (i && i.style["line-height"]) o["line-height"] = i.style.lineHeight;else {
            var _t16 = parseInt(o["line-height"], 10) / parseInt(o["font-size"], 10);

            o["line-height"] = _t16.toFixed(1);
          }
          return o.anchor = t.isOnAnchor() && ut.ancestor(t.sc, ut.isAnchor), o.ancestors = ut.listAncestor(t.sc, ut.isEditable), o.range = t, o;
        };

        return wt;
      }();

      var yt =
      /*#__PURE__*/
      function () {
        function yt() {}

        var _proto6 = yt.prototype;

        _proto6.insertOrderedList = function insertOrderedList(t) {
          this.toggleList("OL", t);
        };

        _proto6.insertUnorderedList = function insertUnorderedList(t) {
          this.toggleList("UL", t);
        };

        _proto6.indent = function indent(t) {
          var _this5 = this;

          var e = bt.create(t).wrapBodyInlineWithPara(),
              o = e.nodes(ut.isPara, {
            includeAncestor: !0
          }),
              i = y.clusterBy(o, b.peq2("parentNode"));
          n.a.each(i, function (t, e) {
            var o = y.head(e);

            if (ut.isLi(o)) {
              var _t17 = _this5.findList(o.previousSibling);

              _t17 ? e.map(function (e) {
                return _t17.appendChild(e);
              }) : (_this5.wrapList(e, o.parentNode.nodeName), e.map(function (t) {
                return t.parentNode;
              }).map(function (t) {
                return _this5.appendToPrevious(t);
              }));
            } else n.a.each(e, function (t, e) {
              n()(e).css("marginLeft", function (t, e) {
                return (parseInt(e, 10) || 0) + 25;
              });
            });
          }), e.select();
        };

        _proto6.outdent = function outdent(t) {
          var _this6 = this;

          var e = bt.create(t).wrapBodyInlineWithPara(),
              o = e.nodes(ut.isPara, {
            includeAncestor: !0
          }),
              i = y.clusterBy(o, b.peq2("parentNode"));
          n.a.each(i, function (t, e) {
            var o = y.head(e);
            ut.isLi(o) ? _this6.releaseList([e]) : n.a.each(e, function (t, e) {
              n()(e).css("marginLeft", function (t, e) {
                return (e = parseInt(e, 10) || 0) > 25 ? e - 25 : "";
              });
            });
          }), e.select();
        };

        _proto6.toggleList = function toggleList(t, e) {
          var _this7 = this;

          var o = bt.create(e).wrapBodyInlineWithPara();
          var i = o.nodes(ut.isPara, {
            includeAncestor: !0
          });
          var s = o.paraBookmark(i),
              r = y.clusterBy(i, b.peq2("parentNode"));

          if (y.find(i, ut.isPurePara)) {
            var _e9 = [];
            n.a.each(r, function (o, i) {
              _e9 = _e9.concat(_this7.wrapList(i, t));
            }), i = _e9;
          } else {
            var _e10 = o.nodes(ut.isList, {
              includeAncestor: !0
            }).filter(function (e) {
              return !n.a.nodeName(e, t);
            });

            _e10.length ? n.a.each(_e10, function (e, o) {
              ut.replace(o, t);
            }) : i = this.releaseList(r, !0);
          }

          bt.createFromParaBookmark(s, i).select();
        };

        _proto6.wrapList = function wrapList(t, e) {
          var o = y.head(t),
              i = y.last(t),
              n = ut.isList(o.previousSibling) && o.previousSibling,
              s = ut.isList(i.nextSibling) && i.nextSibling,
              r = n || ut.insertAfter(ut.create(e || "UL"), i);
          return t = t.map(function (t) {
            return ut.isPurePara(t) ? ut.replace(t, "LI") : t;
          }), ut.appendChildNodes(r, t), s && (ut.appendChildNodes(r, y.from(s.childNodes)), ut.remove(s)), t;
        };

        _proto6.releaseList = function releaseList(t, e) {
          var _this8 = this;

          var o = [];
          return n.a.each(t, function (t, i) {
            var s = y.head(i),
                r = y.last(i),
                a = e ? ut.lastAncestor(s, ut.isList) : s.parentNode,
                l = a.parentNode;
            if ("LI" === a.parentNode.nodeName) i.map(function (t) {
              var e = _this8.findNextSiblings(t);

              l.nextSibling ? l.parentNode.insertBefore(t, l.nextSibling) : l.parentNode.appendChild(t), e.length && (_this8.wrapList(e, a.nodeName), t.appendChild(e[0].parentNode));
            }), 0 === a.children.length && l.removeChild(a), 0 === l.childNodes.length && l.parentNode.removeChild(l);else {
              var _t18 = a.childNodes.length > 1 ? ut.splitTree(a, {
                node: r.parentNode,
                offset: ut.position(r) + 1
              }, {
                isSkipPaddingBlankHTML: !0
              }) : null,
                  _o11 = ut.splitTree(a, {
                node: s.parentNode,
                offset: ut.position(s)
              }, {
                isSkipPaddingBlankHTML: !0
              });

              i = e ? ut.listDescendant(_o11, ut.isLi) : y.from(_o11.childNodes).filter(ut.isLi), !e && ut.isList(a.parentNode) || (i = i.map(function (t) {
                return ut.replace(t, "P");
              })), n.a.each(y.from(i).reverse(), function (t, e) {
                ut.insertAfter(e, a);
              });

              var _l3 = y.compact([a, _o11, _t18]);

              n.a.each(_l3, function (t, e) {
                var o = [e].concat(ut.listDescendant(e, ut.isList));
                n.a.each(o.reverse(), function (t, e) {
                  ut.nodeLength(e) || ut.remove(e, !0);
                });
              });
            }
            o = o.concat(i);
          }), o;
        };

        _proto6.appendToPrevious = function appendToPrevious(t) {
          return t.previousSibling ? ut.appendChildNodes(t.previousSibling, [t]) : this.wrapList([t], "LI");
        };

        _proto6.findList = function findList(t) {
          return t ? y.find(t.children, function (t) {
            return ["OL", "UL"].indexOf(t.nodeName) > -1;
          }) : null;
        };

        _proto6.findNextSiblings = function findNextSiblings(t) {
          var e = [];

          for (; t.nextSibling;) {
            e.push(t.nextSibling), t = t.nextSibling;
          }

          return e;
        };

        return yt;
      }();

      var xt =
      /*#__PURE__*/
      function () {
        function xt(t) {
          this.bullet = new yt(), this.options = t.options;
        }

        var _proto7 = xt.prototype;

        _proto7.insertTab = function insertTab(t, e) {
          var o = ut.createText(new Array(e + 1).join(ut.NBSP_CHAR));
          (t = t.deleteContents()).insertNode(o, !0), (t = bt.create(o, e)).select();
        };

        _proto7.insertParagraph = function insertParagraph(t, e) {
          e = (e = (e = e || bt.create(t)).deleteContents()).wrapBodyInlineWithPara();
          var o = ut.ancestor(e.sc, ut.isPara);
          var i;

          if (o) {
            if (ut.isLi(o) && (ut.isEmpty(o) || ut.deepestChildIsEmpty(o))) return void this.bullet.toggleList(o.parentNode.nodeName);
            {
              var _t19 = null;

              if (1 === this.options.blockquoteBreakingLevel ? _t19 = ut.ancestor(o, ut.isBlockquote) : 2 === this.options.blockquoteBreakingLevel && (_t19 = ut.lastAncestor(o, ut.isBlockquote)), _t19) {
                i = n()(ut.emptyPara)[0], ut.isRightEdgePoint(e.getStartPoint()) && ut.isBR(e.sc.nextSibling) && n()(e.sc.nextSibling).remove();

                var _o12 = ut.splitTree(_t19, e.getStartPoint(), {
                  isDiscardEmptySplits: !0
                });

                _o12 ? _o12.parentNode.insertBefore(i, _o12) : ut.insertAfter(i, _t19);
              } else {
                i = ut.splitTree(o, e.getStartPoint());

                var _t20 = ut.listDescendant(o, ut.isEmptyAnchor);

                _t20 = _t20.concat(ut.listDescendant(i, ut.isEmptyAnchor)), n.a.each(_t20, function (t, e) {
                  ut.remove(e);
                }), (ut.isHeading(i) || ut.isPre(i) || ut.isCustomStyleTag(i)) && ut.isEmpty(i) && (i = ut.replace(i, "p"));
              }
            }
          } else {
            var _t21 = e.sc.childNodes[e.so];
            i = n()(ut.emptyPara)[0], _t21 ? e.sc.insertBefore(i, _t21) : e.sc.appendChild(i);
          }

          bt.create(i, 0).normalize().select().scrollIntoView(t);
        };

        return xt;
      }();

      var St = function St(t, e, o, i) {
        var n = {
          colPos: 0,
          rowPos: 0
        },
            s = [],
            r = [];

        function a(t, e, o, i, n, r, a) {
          var l = {
            baseRow: o,
            baseCell: i,
            isRowSpan: n,
            isColSpan: r,
            isVirtual: a
          };
          s[t] || (s[t] = []), s[t][e] = l;
        }

        function l(t, e, o, i) {
          return {
            baseCell: t.baseCell,
            action: e,
            virtualTable: {
              rowIndex: o,
              cellIndex: i
            }
          };
        }

        function c(t, e) {
          if (!s[t]) return e;
          if (!s[t][e]) return e;
          var o = e;

          for (; s[t][o];) {
            if (o++, !s[t][o]) return o;
          }
        }

        function d(t, e) {
          var o = c(t.rowIndex, e.cellIndex),
              i = e.colSpan > 1,
              s = e.rowSpan > 1,
              r = t.rowIndex === n.rowPos && e.cellIndex === n.colPos;
          a(t.rowIndex, o, t, e, s, i, !1);
          var l = e.attributes.rowSpan ? parseInt(e.attributes.rowSpan.value, 10) : 0;
          if (l > 1) for (var _n6 = 1; _n6 < l; _n6++) {
            var _s4 = t.rowIndex + _n6;

            h(_s4, o, e, r), a(_s4, o, t, e, !0, i, !0);
          }
          var d = e.attributes.colSpan ? parseInt(e.attributes.colSpan.value, 10) : 0;
          if (d > 1) for (var _i11 = 1; _i11 < d; _i11++) {
            var _n7 = c(t.rowIndex, o + _i11);

            h(t.rowIndex, _n7, e, r), a(t.rowIndex, _n7, t, e, s, !0, !0);
          }
        }

        function h(t, e, o, i) {
          t === n.rowPos && n.colPos >= o.cellIndex && o.cellIndex <= e && !i && n.colPos++;
        }

        function u(t) {
          switch (e) {
            case St.where.Column:
              if (t.isColSpan) return St.resultAction.SubtractSpanCount;
              break;

            case St.where.Row:
              if (!t.isVirtual && t.isRowSpan) return St.resultAction.AddCell;
              if (t.isRowSpan) return St.resultAction.SubtractSpanCount;
          }

          return St.resultAction.RemoveCell;
        }

        function p(t) {
          switch (e) {
            case St.where.Column:
              if (t.isColSpan) return St.resultAction.SumSpanCount;
              if (t.isRowSpan && t.isVirtual) return St.resultAction.Ignore;
              break;

            case St.where.Row:
              if (t.isRowSpan) return St.resultAction.SumSpanCount;
              if (t.isColSpan && t.isVirtual) return St.resultAction.Ignore;
          }

          return St.resultAction.AddCell;
        }

        this.getActionList = function () {
          var t = e === St.where.Row ? n.rowPos : -1,
              i = e === St.where.Column ? n.colPos : -1;
          var a = 0,
              c = !0;

          for (; c;) {
            var _e11 = t >= 0 ? t : a,
                _n8 = i >= 0 ? i : a,
                _d = s[_e11];

            if (!_d) return c = !1, r;
            var _h = _d[_n8];
            if (!_h) return c = !1, r;
            var _m = St.resultAction.Ignore;

            switch (o) {
              case St.requestAction.Add:
                _m = p(_h);
                break;

              case St.requestAction.Delete:
                _m = u(_h);
            }

            r.push(l(_h, _m, _e11, _n8)), a++;
          }

          return r;
        }, t && t.tagName && ("td" === t.tagName.toLowerCase() || "th" === t.tagName.toLowerCase()) ? (n.colPos = t.cellIndex, t.parentElement && t.parentElement.tagName && "tr" === t.parentElement.tagName.toLowerCase() ? n.rowPos = t.parentElement.rowIndex : console.error("Impossible to identify start Row point.", t)) : console.error("Impossible to identify start Cell point.", t), function () {
          var t = i.rows;

          for (var _e12 = 0; _e12 < t.length; _e12++) {
            var _o13 = t[_e12].cells;

            for (var _i12 = 0; _i12 < _o13.length; _i12++) {
              d(t[_e12], _o13[_i12]);
            }
          }
        }();
      };

      St.where = {
        Row: 0,
        Column: 1
      }, St.requestAction = {
        Add: 0,
        Delete: 1
      }, St.resultAction = {
        Ignore: 0,
        SubtractSpanCount: 1,
        RemoveCell: 2,
        AddCell: 3,
        SumSpanCount: 4
      };

      var $t =
      /*#__PURE__*/
      function () {
        function $t() {}

        var _proto8 = $t.prototype;

        _proto8.tab = function tab(t, e) {
          var o = ut.ancestor(t.commonAncestor(), ut.isCell),
              i = ut.ancestor(o, ut.isTable),
              n = ut.listDescendant(i, ut.isCell),
              s = y[e ? "prev" : "next"](n, o);
          s && bt.create(s, 0).select();
        };

        _proto8.addRow = function addRow(t, e) {
          var o = ut.ancestor(t.commonAncestor(), ut.isCell),
              i = n()(o).closest("tr"),
              s = this.recoverAttributes(i),
              r = n()("<tr" + s + "></tr>"),
              a = new St(o, St.where.Row, St.requestAction.Add, n()(i).closest("table")[0]).getActionList();

          for (var _t22 = 0; _t22 < a.length; _t22++) {
            var _o14 = a[_t22],
                _s5 = this.recoverAttributes(_o14.baseCell);

            switch (_o14.action) {
              case St.resultAction.AddCell:
                r.append("<td" + _s5 + ">" + ut.blank + "</td>");
                break;

              case St.resultAction.SumSpanCount:
                if ("top" === e) {
                  if ((_o14.baseCell.parent ? _o14.baseCell.closest("tr").rowIndex : 0) <= i[0].rowIndex) {
                    var _t24 = n()("<div></div>").append(n()("<td" + _s5 + ">" + ut.blank + "</td>").removeAttr("rowspan")).html();

                    r.append(_t24);
                    break;
                  }
                }

                var _t23 = parseInt(_o14.baseCell.rowSpan, 10);

                _t23++, _o14.baseCell.setAttribute("rowSpan", _t23);
            }
          }

          if ("top" === e) i.before(r);else {
            if (o.rowSpan > 1) {
              var _t25 = i[0].rowIndex + (o.rowSpan - 2);

              return void n()(n()(i).parent().find("tr")[_t25]).after(n()(r));
            }

            i.after(r);
          }
        };

        _proto8.addCol = function addCol(t, e) {
          var o = ut.ancestor(t.commonAncestor(), ut.isCell),
              i = n()(o).closest("tr");
          n()(i).siblings().push(i);
          var s = new St(o, St.where.Column, St.requestAction.Add, n()(i).closest("table")[0]).getActionList();

          for (var _t26 = 0; _t26 < s.length; _t26++) {
            var _o15 = s[_t26],
                _i13 = this.recoverAttributes(_o15.baseCell);

            switch (_o15.action) {
              case St.resultAction.AddCell:
                "right" === e ? n()(_o15.baseCell).after("<td" + _i13 + ">" + ut.blank + "</td>") : n()(_o15.baseCell).before("<td" + _i13 + ">" + ut.blank + "</td>");
                break;

              case St.resultAction.SumSpanCount:
                if ("right" === e) {
                  var _t27 = parseInt(_o15.baseCell.colSpan, 10);

                  _t27++, _o15.baseCell.setAttribute("colSpan", _t27);
                } else n()(_o15.baseCell).before("<td" + _i13 + ">" + ut.blank + "</td>");

            }
          }
        };

        _proto8.recoverAttributes = function recoverAttributes(t) {
          var e = "";
          if (!t) return e;
          var o = t.attributes || [];

          for (var _t28 = 0; _t28 < o.length; _t28++) {
            "id" !== o[_t28].name.toLowerCase() && o[_t28].specified && (e += " " + o[_t28].name + "='" + o[_t28].value + "'");
          }

          return e;
        };

        _proto8.deleteRow = function deleteRow(t) {
          var e = ut.ancestor(t.commonAncestor(), ut.isCell),
              o = n()(e).closest("tr"),
              i = o.children("td, th").index(n()(e)),
              s = o[0].rowIndex,
              r = new St(e, St.where.Row, St.requestAction.Delete, n()(o).closest("table")[0]).getActionList();

          for (var _t29 = 0; _t29 < r.length; _t29++) {
            if (!r[_t29]) continue;

            var _e13 = r[_t29].baseCell,
                _n9 = r[_t29].virtualTable,
                _a3 = _e13.rowSpan && _e13.rowSpan > 1;

            var _l4 = _a3 ? parseInt(_e13.rowSpan, 10) : 0;

            switch (_r3[_t30].action) {
              case St.resultAction.Ignore:
                continue;

              case St.resultAction.AddCell:
                var _t30 = o.next("tr")[0];
                if (!_t30) continue;
                var _r3 = o[0].cells[i];
                _a3 && (_l4 > 2 ? (_l4--, _t30.insertBefore(_r3, _t30.cells[i]), _t30.cells[i].setAttribute("rowSpan", _l4), _t30.cells[i].innerHTML = "") : 2 === _l4 && (_t30.insertBefore(_r3, _t30.cells[i]), _t30.cells[i].removeAttribute("rowSpan"), _t30.cells[i].innerHTML = ""));
                continue;

              case St.resultAction.SubtractSpanCount:
                _a3 && (_l4 > 2 ? (_l4--, _e13.setAttribute("rowSpan", _l4), _n9.rowIndex !== s && _e13.cellIndex === i && (_e13.innerHTML = "")) : 2 === _l4 && (_e13.removeAttribute("rowSpan"), _n9.rowIndex !== s && _e13.cellIndex === i && (_e13.innerHTML = "")));
                continue;

              case St.resultAction.RemoveCell:
                continue;
            }
          }

          o.remove();
        };

        _proto8.deleteCol = function deleteCol(t) {
          var e = ut.ancestor(t.commonAncestor(), ut.isCell),
              o = n()(e).closest("tr"),
              i = o.children("td, th").index(n()(e)),
              s = new St(e, St.where.Column, St.requestAction.Delete, n()(o).closest("table")[0]).getActionList();

          for (var _t31 = 0; _t31 < s.length; _t31++) {
            if (s[_t31]) switch (s[_t31].action) {
              case St.resultAction.Ignore:
                continue;

              case St.resultAction.SubtractSpanCount:
                var _e14 = s[_t31].baseCell;

                if (_e14.colSpan && _e14.colSpan > 1) {
                  var _t32 = _e14.colSpan ? parseInt(_e14.colSpan, 10) : 0;

                  _t32 > 2 ? (_t32--, _e14.setAttribute("colSpan", _t32), _e14.cellIndex === i && (_e14.innerHTML = "")) : 2 === _t32 && (_e14.removeAttribute("colSpan"), _e14.cellIndex === i && (_e14.innerHTML = ""));
                }

                continue;

              case St.resultAction.RemoveCell:
                ut.remove(s[_t31].baseCell, !0);
                continue;
            }
          }
        };

        _proto8.createTable = function createTable(t, e, o) {
          var i = [];
          var s;

          for (var _e15 = 0; _e15 < t; _e15++) {
            i.push("<td>" + ut.blank + "</td>");
          }

          s = i.join("");
          var r = [];
          var a;

          for (var _t33 = 0; _t33 < e; _t33++) {
            r.push("<tr>" + s + "</tr>");
          }

          a = r.join("");
          var l = n()("<table>" + a + "</table>");
          return o && o.tableClassName && l.addClass(o.tableClassName), l[0];
        };

        _proto8.deleteTable = function deleteTable(t) {
          var e = ut.ancestor(t.commonAncestor(), ut.isCell);
          n()(e).closest("table").remove();
        };

        return $t;
      }();

      var It;
      f.hasCodeMirror && (It = window.CodeMirror);
      var Nt = /^([A-Za-z][A-Za-z0-9+-.]*\:[\/]{2}|tel:|mailto:[A-Z0-9._%+-]+@)?(www\.)?(.+)$/i;
      n.a.summernote = n.a.extend(n.a.summernote, {
        version: "0.8.15",
        plugins: {},
        dom: ut,
        range: bt,
        lists: y,
        options: {
          langInfo: n.a.summernote.lang["en-US"],
          editing: !0,
          modules: {
            editor:
            /*#__PURE__*/
            function () {
              function editor(t) {
                var _this9 = this;

                this.context = t, this.$note = t.layoutInfo.note, this.$editor = t.layoutInfo.editor, this.$editable = t.layoutInfo.editable, this.options = t.options, this.lang = this.options.langInfo, this.editable = this.$editable[0], this.lastRange = null, this.snapshot = null, this.style = new wt(), this.table = new $t(), this.typing = new xt(t), this.bullet = new yt(), this.history = new Ct(this.$editable), this.context.memo("help.undo", this.lang.help.undo), this.context.memo("help.redo", this.lang.help.redo), this.context.memo("help.tab", this.lang.help.tab), this.context.memo("help.untab", this.lang.help.untab), this.context.memo("help.insertParagraph", this.lang.help.insertParagraph), this.context.memo("help.insertOrderedList", this.lang.help.insertOrderedList), this.context.memo("help.insertUnorderedList", this.lang.help.insertUnorderedList), this.context.memo("help.indent", this.lang.help.indent), this.context.memo("help.outdent", this.lang.help.outdent), this.context.memo("help.formatPara", this.lang.help.formatPara), this.context.memo("help.insertHorizontalRule", this.lang.help.insertHorizontalRule), this.context.memo("help.fontName", this.lang.help.fontName);
                var e = ["bold", "italic", "underline", "strikethrough", "superscript", "subscript", "justifyLeft", "justifyCenter", "justifyRight", "justifyFull", "formatBlock", "removeFormat", "backColor"];

                for (var _t34 = 0, _o16 = e.length; _t34 < _o16; _t34++) {
                  this[e[_t34]] = function (t) {
                    return function (e) {
                      _this9.beforeCommand(), document.execCommand(t, !1, e), _this9.afterCommand(!0);
                    };
                  }(e[_t34]), this.context.memo("help." + e[_t34], this.lang.help[e[_t34]]);
                }

                this.fontName = this.wrapCommand(function (t) {
                  return _this9.fontStyling("font-family", f.validFontName(t));
                }), this.fontSize = this.wrapCommand(function (t) {
                  var e = _this9.currentStyle()["font-size-unit"];

                  return _this9.fontStyling("font-size", t + e);
                }), this.fontSizeUnit = this.wrapCommand(function (t) {
                  var e = _this9.currentStyle()["font-size"];

                  return _this9.fontStyling("font-size", e + t);
                });

                for (var _t35 = 1; _t35 <= 6; _t35++) {
                  this["formatH" + _t35] = function (t) {
                    return function () {
                      _this9.formatBlock("H" + t);
                    };
                  }(_t35), this.context.memo("help.formatH" + _t35, this.lang.help["formatH" + _t35]);
                }

                this.insertParagraph = this.wrapCommand(function () {
                  _this9.typing.insertParagraph(_this9.editable);
                }), this.insertOrderedList = this.wrapCommand(function () {
                  _this9.bullet.insertOrderedList(_this9.editable);
                }), this.insertUnorderedList = this.wrapCommand(function () {
                  _this9.bullet.insertUnorderedList(_this9.editable);
                }), this.indent = this.wrapCommand(function () {
                  _this9.bullet.indent(_this9.editable);
                }), this.outdent = this.wrapCommand(function () {
                  _this9.bullet.outdent(_this9.editable);
                }), this.insertNode = this.wrapCommand(function (t) {
                  if (_this9.isLimited(n()(t).text().length)) return;
                  _this9.getLastRange().insertNode(t), _this9.setLastRange(bt.createFromNodeAfter(t).select());
                }), this.insertText = this.wrapCommand(function (t) {
                  if (_this9.isLimited(t.length)) return;

                  var e = _this9.getLastRange().insertNode(ut.createText(t));

                  _this9.setLastRange(bt.create(e, ut.nodeLength(e)).select());
                }), this.pasteHTML = this.wrapCommand(function (t) {
                  if (_this9.isLimited(t.length)) return;
                  t = _this9.context.invoke("codeview.purify", t);

                  var e = _this9.getLastRange().pasteHTML(t);

                  _this9.setLastRange(bt.createFromNodeAfter(y.last(e)).select());
                }), this.formatBlock = this.wrapCommand(function (t, e) {
                  var o = _this9.options.callbacks.onApplyCustomStyle;
                  o ? o.call(_this9, e, _this9.context, _this9.onFormatBlock) : _this9.onFormatBlock(t, e);
                }), this.insertHorizontalRule = this.wrapCommand(function () {
                  var t = _this9.getLastRange().insertNode(ut.create("HR"));

                  t.nextSibling && _this9.setLastRange(bt.create(t.nextSibling, 0).normalize().select());
                }), this.lineHeight = this.wrapCommand(function (t) {
                  _this9.style.stylePara(_this9.getLastRange(), {
                    lineHeight: t
                  });
                }), this.createLink = this.wrapCommand(function (t) {
                  var e = t.url;
                  var o = t.text,
                      i = t.isNewWindow,
                      s = t.checkProtocol;

                  var r = t.range || _this9.getLastRange();

                  var a = o.length - r.toString().length;
                  if (a > 0 && _this9.isLimited(a)) return;
                  var l = r.toString() !== o;
                  "string" == typeof e && (e = e.trim()), _this9.options.onCreateLink ? e = _this9.options.onCreateLink(e) : s && (e = /^([A-Za-z][A-Za-z0-9+-.]*\:|#|\/)/.test(e) ? e : _this9.options.defaultProtocol + e);
                  var c = [];

                  if (l) {
                    r = r.deleteContents();

                    var _t36 = r.insertNode(n()("<A>" + o + "</A>")[0]);

                    c.push(_t36);
                  } else c = _this9.style.styleNodes(r, {
                    nodeName: "A",
                    expandClosestSibling: !0,
                    onlyPartialContains: !0
                  });

                  n.a.each(c, function (t, o) {
                    n()(o).attr("href", e), i ? n()(o).attr("target", "_blank") : n()(o).removeAttr("target");
                  });
                  var d = bt.createFromNodeBefore(y.head(c)).getStartPoint(),
                      h = bt.createFromNodeAfter(y.last(c)).getEndPoint();

                  _this9.setLastRange(bt.create(d.node, d.offset, h.node, h.offset).select());
                }), this.color = this.wrapCommand(function (t) {
                  var e = t.foreColor,
                      o = t.backColor;
                  e && document.execCommand("foreColor", !1, e), o && document.execCommand("backColor", !1, o);
                }), this.foreColor = this.wrapCommand(function (t) {
                  document.execCommand("styleWithCSS", !1, !0), document.execCommand("foreColor", !1, t);
                }), this.insertTable = this.wrapCommand(function (t) {
                  var e = t.split("x");

                  _this9.getLastRange().deleteContents().insertNode(_this9.table.createTable(e[0], e[1], _this9.options));
                }), this.removeMedia = this.wrapCommand(function () {
                  var t = n()(_this9.restoreTarget()).parent();
                  t.closest("figure").length ? t.closest("figure").remove() : t = n()(_this9.restoreTarget()).detach(), _this9.context.triggerEvent("media.delete", t, _this9.$editable);
                }), this.floatMe = this.wrapCommand(function (t) {
                  var e = n()(_this9.restoreTarget());
                  e.toggleClass("note-float-left", "left" === t), e.toggleClass("note-float-right", "right" === t), e.css("float", "none" === t ? "" : t);
                }), this.resize = this.wrapCommand(function (t) {
                  var e = n()(_this9.restoreTarget());
                  0 === (t = parseFloat(t)) ? e.css("width", "") : e.css({
                    width: 100 * t + "%",
                    height: ""
                  });
                });
              }

              var _proto9 = editor.prototype;

              _proto9.initialize = function initialize() {
                var _this10 = this;

                this.$editable.on("keydown", function (t) {
                  if (t.keyCode === kt.code.ENTER && _this10.context.triggerEvent("enter", t), _this10.context.triggerEvent("keydown", t), _this10.snapshot = _this10.history.makeSnapshot(), t.isDefaultPrevented() || (_this10.options.shortcuts ? _this10.handleKeyMap(t) : _this10.preventDefaultEditableShortCuts(t)), _this10.isLimited(1, t)) {
                    var _t37 = _this10.getLastRange();

                    if (_t37.eo - _t37.so == 0) return !1;
                  }

                  _this10.setLastRange();
                }).on("keyup", function (t) {
                  _this10.setLastRange(), _this10.context.triggerEvent("keyup", t);
                }).on("focus", function (t) {
                  _this10.setLastRange(), _this10.context.triggerEvent("focus", t);
                }).on("blur", function (t) {
                  _this10.context.triggerEvent("blur", t);
                }).on("mousedown", function (t) {
                  _this10.context.triggerEvent("mousedown", t);
                }).on("mouseup", function (t) {
                  _this10.setLastRange(), _this10.history.recordUndo(), _this10.context.triggerEvent("mouseup", t);
                }).on("scroll", function (t) {
                  _this10.context.triggerEvent("scroll", t);
                }).on("paste", function (t) {
                  _this10.setLastRange(), _this10.context.triggerEvent("paste", t);
                }).on("input", function (t) {
                  _this10.isLimited(0) && _this10.snapshot && _this10.history.applySnapshot(_this10.snapshot);
                }), this.$editable.attr("spellcheck", this.options.spellCheck), this.$editable.attr("autocorrect", this.options.spellCheck), this.options.disableGrammar && this.$editable.attr("data-gramm", !1), this.$editable.html(ut.html(this.$note) || ut.emptyPara), this.$editable.on(f.inputEventName, b.debounce(function () {
                  _this10.context.triggerEvent("change", _this10.$editable.html(), _this10.$editable);
                }, 10)), this.$editor.on("focusin", function (t) {
                  _this10.context.triggerEvent("focusin", t);
                }).on("focusout", function (t) {
                  _this10.context.triggerEvent("focusout", t);
                }), this.options.airMode || (this.options.width && this.$editor.outerWidth(this.options.width), this.options.height && this.$editable.outerHeight(this.options.height), this.options.maxHeight && this.$editable.css("max-height", this.options.maxHeight), this.options.minHeight && this.$editable.css("min-height", this.options.minHeight)), this.history.recordUndo(), this.setLastRange();
              };

              _proto9.destroy = function destroy() {
                this.$editable.off();
              };

              _proto9.handleKeyMap = function handleKeyMap(t) {
                var e = this.options.keyMap[f.isMac ? "mac" : "pc"],
                    o = [];
                t.metaKey && o.push("CMD"), t.ctrlKey && !t.altKey && o.push("CTRL"), t.shiftKey && o.push("SHIFT");
                var i = kt.nameFromCode[t.keyCode];
                i && o.push(i);
                var n = e[o.join("+")];
                "TAB" !== i || this.options.tabDisable ? n ? !1 !== this.context.invoke(n) && t.preventDefault() : kt.isEdit(t.keyCode) && this.afterCommand() : this.afterCommand();
              };

              _proto9.preventDefaultEditableShortCuts = function preventDefaultEditableShortCuts(t) {
                (t.ctrlKey || t.metaKey) && y.contains([66, 73, 85], t.keyCode) && t.preventDefault();
              };

              _proto9.isLimited = function isLimited(t, e) {
                return t = t || 0, (void 0 === e || !(kt.isMove(e.keyCode) || kt.isNavigation(e.keyCode) || e.ctrlKey || e.metaKey || y.contains([kt.code.BACKSPACE, kt.code.DELETE], e.keyCode))) && this.options.maxTextLength > 0 && this.$editable.text().length + t > this.options.maxTextLength;
              };

              _proto9.createRange = function createRange() {
                return this.focus(), this.setLastRange(), this.getLastRange();
              };

              _proto9.setLastRange = function setLastRange(t) {
                t ? this.lastRange = t : (this.lastRange = bt.create(this.editable), 0 === n()(this.lastRange.sc).closest(".note-editable").length && (this.lastRange = bt.createFromBodyElement(this.editable)));
              };

              _proto9.getLastRange = function getLastRange() {
                return this.lastRange || this.setLastRange(), this.lastRange;
              };

              _proto9.saveRange = function saveRange(t) {
                t && this.getLastRange().collapse().select();
              };

              _proto9.restoreRange = function restoreRange() {
                this.lastRange && (this.lastRange.select(), this.focus());
              };

              _proto9.saveTarget = function saveTarget(t) {
                this.$editable.data("target", t);
              };

              _proto9.clearTarget = function clearTarget() {
                this.$editable.removeData("target");
              };

              _proto9.restoreTarget = function restoreTarget() {
                return this.$editable.data("target");
              };

              _proto9.currentStyle = function currentStyle() {
                var t = bt.create();
                return t && (t = t.normalize()), t ? this.style.current(t) : this.style.fromNode(this.$editable);
              };

              _proto9.styleFromNode = function styleFromNode(t) {
                return this.style.fromNode(t);
              };

              _proto9.undo = function undo() {
                this.context.triggerEvent("before.command", this.$editable.html()), this.history.undo(), this.context.triggerEvent("change", this.$editable.html(), this.$editable);
              };

              _proto9.commit = function commit() {
                this.context.triggerEvent("before.command", this.$editable.html()), this.history.commit(), this.context.triggerEvent("change", this.$editable.html(), this.$editable);
              };

              _proto9.redo = function redo() {
                this.context.triggerEvent("before.command", this.$editable.html()), this.history.redo(), this.context.triggerEvent("change", this.$editable.html(), this.$editable);
              };

              _proto9.beforeCommand = function beforeCommand() {
                this.context.triggerEvent("before.command", this.$editable.html()), this.focus();
              };

              _proto9.afterCommand = function afterCommand(t) {
                this.normalizeContent(), this.history.recordUndo(), t || this.context.triggerEvent("change", this.$editable.html(), this.$editable);
              };

              _proto9.tab = function tab() {
                var t = this.getLastRange();
                if (t.isCollapsed() && t.isOnCell()) this.table.tab(t);else {
                  if (0 === this.options.tabSize) return !1;
                  this.isLimited(this.options.tabSize) || (this.beforeCommand(), this.typing.insertTab(t, this.options.tabSize), this.afterCommand());
                }
              };

              _proto9.untab = function untab() {
                var t = this.getLastRange();
                if (t.isCollapsed() && t.isOnCell()) this.table.tab(t, !0);else if (0 === this.options.tabSize) return !1;
              };

              _proto9.wrapCommand = function wrapCommand(t) {
                return function () {
                  this.beforeCommand(), t.apply(this, arguments), this.afterCommand();
                };
              };

              _proto9.insertImage = function insertImage(t, e) {
                var _this11 = this;

                return (o = t, n.a.Deferred(function (t) {
                  var e = n()("<img>");
                  e.one("load", function () {
                    e.off("error abort"), t.resolve(e);
                  }).one("error abort", function () {
                    e.off("load").detach(), t.reject(e);
                  }).css({
                    display: "none"
                  }).appendTo(document.body).attr("src", o);
                }).promise()).then(function (t) {
                  _this11.beforeCommand(), "function" == typeof e ? e(t) : ("string" == typeof e && t.attr("data-filename", e), t.css("width", Math.min(_this11.$editable.width(), t.width()))), t.show(), _this11.getLastRange().insertNode(t[0]), _this11.setLastRange(bt.createFromNodeAfter(t[0]).select()), _this11.afterCommand();
                }).fail(function (t) {
                  _this11.context.triggerEvent("image.upload.error", t);
                });
                var o;
              };

              _proto9.insertImagesAsDataURL = function insertImagesAsDataURL(t) {
                var _this12 = this;

                n.a.each(t, function (t, e) {
                  var o = e.name;
                  _this12.options.maximumImageFileSize && _this12.options.maximumImageFileSize < e.size ? _this12.context.triggerEvent("image.upload.error", _this12.lang.image.maximumFileSizeError) : function (t) {
                    return n.a.Deferred(function (e) {
                      n.a.extend(new FileReader(), {
                        onload: function onload(t) {
                          var o = t.target.result;
                          e.resolve(o);
                        },
                        onerror: function onerror(t) {
                          e.reject(t);
                        }
                      }).readAsDataURL(t);
                    }).promise();
                  }(e).then(function (t) {
                    return _this12.insertImage(t, o);
                  }).fail(function () {
                    _this12.context.triggerEvent("image.upload.error");
                  });
                });
              };

              _proto9.insertImagesOrCallback = function insertImagesOrCallback(t) {
                this.options.callbacks.onImageUpload ? this.context.triggerEvent("image.upload", t) : this.insertImagesAsDataURL(t);
              };

              _proto9.getSelectedText = function getSelectedText() {
                var t = this.getLastRange();
                return t.isOnAnchor() && (t = bt.createFromNode(ut.ancestor(t.sc, ut.isAnchor))), t.toString();
              };

              _proto9.onFormatBlock = function onFormatBlock(t, e) {
                if (document.execCommand("FormatBlock", !1, f.isMSIE ? "<" + t + ">" : t), e && e.length && (e[0].tagName.toUpperCase() !== t.toUpperCase() && (e = e.find(t)), e && e.length)) {
                  var _o17 = e[0].className || "";

                  if (_o17) {
                    var _e16 = this.createRange();

                    n()([_e16.sc, _e16.ec]).closest(t).addClass(_o17);
                  }
                }
              };

              _proto9.formatPara = function formatPara() {
                this.formatBlock("P");
              };

              _proto9.fontStyling = function fontStyling(t, e) {
                var o = this.getLastRange();

                if ("" !== o) {
                  var _i14 = this.style.styleNodes(o);

                  if (this.$editor.find(".note-status-output").html(""), n()(_i14).css(t, e), o.isCollapsed()) {
                    var _t38 = y.head(_i14);

                    _t38 && !ut.nodeLength(_t38) && (_t38.innerHTML = ut.ZERO_WIDTH_NBSP_CHAR, bt.createFromNodeAfter(_t38.firstChild).select(), this.setLastRange(), this.$editable.data("bogus", _t38));
                  }
                } else {
                  var _t39 = n.a.now();

                  this.$editor.find(".note-status-output").html('<div id="note-status-output-' + _t39 + '" class="alert alert-info">' + this.lang.output.noSelection + "</div>"), setTimeout(function () {
                    n()("#note-status-output-" + _t39).remove();
                  }, 5e3);
                }
              };

              _proto9.unlink = function unlink() {
                var t = this.getLastRange();

                if (t.isOnAnchor()) {
                  var _e17 = ut.ancestor(t.sc, ut.isAnchor);

                  t = bt.createFromNode(_e17), t.select(), this.setLastRange(), this.beforeCommand(), document.execCommand("unlink"), this.afterCommand();
                }
              };

              _proto9.getLinkInfo = function getLinkInfo() {
                var t = this.getLastRange().expand(ut.isAnchor),
                    e = n()(y.head(t.nodes(ut.isAnchor))),
                    o = {
                  range: t,
                  text: t.toString(),
                  url: e.length ? e.attr("href") : ""
                };
                return e.length && (o.isNewWindow = "_blank" === e.attr("target")), o;
              };

              _proto9.addRow = function addRow(t) {
                var e = this.getLastRange(this.$editable);
                e.isCollapsed() && e.isOnCell() && (this.beforeCommand(), this.table.addRow(e, t), this.afterCommand());
              };

              _proto9.addCol = function addCol(t) {
                var e = this.getLastRange(this.$editable);
                e.isCollapsed() && e.isOnCell() && (this.beforeCommand(), this.table.addCol(e, t), this.afterCommand());
              };

              _proto9.deleteRow = function deleteRow() {
                var t = this.getLastRange(this.$editable);
                t.isCollapsed() && t.isOnCell() && (this.beforeCommand(), this.table.deleteRow(t), this.afterCommand());
              };

              _proto9.deleteCol = function deleteCol() {
                var t = this.getLastRange(this.$editable);
                t.isCollapsed() && t.isOnCell() && (this.beforeCommand(), this.table.deleteCol(t), this.afterCommand());
              };

              _proto9.deleteTable = function deleteTable() {
                var t = this.getLastRange(this.$editable);
                t.isCollapsed() && t.isOnCell() && (this.beforeCommand(), this.table.deleteTable(t), this.afterCommand());
              };

              _proto9.resizeTo = function resizeTo(t, e, o) {
                var i;

                if (o) {
                  var _o18 = t.y / t.x,
                      _n10 = e.data("ratio");

                  i = {
                    width: _n10 > _o18 ? t.x : t.y / _n10,
                    height: _n10 > _o18 ? t.x * _n10 : t.y
                  };
                } else i = {
                  width: t.x,
                  height: t.y
                };

                e.css(i);
              };

              _proto9.hasFocus = function hasFocus() {
                return this.$editable.is(":focus");
              };

              _proto9.focus = function focus() {
                this.hasFocus() || this.$editable.focus();
              };

              _proto9.isEmpty = function isEmpty() {
                return ut.isEmpty(this.$editable[0]) || ut.emptyPara === this.$editable.html();
              };

              _proto9.empty = function empty() {
                this.context.invoke("code", ut.emptyPara);
              };

              _proto9.normalizeContent = function normalizeContent() {
                this.$editable[0].normalize();
              };

              return editor;
            }(),
            clipboard:
            /*#__PURE__*/
            function () {
              function clipboard(t) {
                this.context = t, this.$editable = t.layoutInfo.editable;
              }

              var _proto10 = clipboard.prototype;

              _proto10.initialize = function initialize() {
                this.$editable.on("paste", this.pasteByEvent.bind(this));
              };

              _proto10.pasteByEvent = function pasteByEvent(t) {
                var e = t.originalEvent.clipboardData;

                if (e && e.items && e.items.length) {
                  var _o19 = e.items.length > 1 ? e.items[1] : y.head(e.items);

                  "file" === _o19.kind && -1 !== _o19.type.indexOf("image/") ? (this.context.invoke("editor.insertImagesOrCallback", [_o19.getAsFile()]), t.preventDefault(), this.context.invoke("editor.afterCommand")) : "string" === _o19.kind && (this.context.invoke("editor.isLimited", e.getData("Text").length) ? t.preventDefault() : this.context.invoke("editor.afterCommand"));
                }
              };

              return clipboard;
            }(),
            dropzone:
            /*#__PURE__*/
            function () {
              function dropzone(t) {
                this.context = t, this.$eventListener = n()(document), this.$editor = t.layoutInfo.editor, this.$editable = t.layoutInfo.editable, this.options = t.options, this.lang = this.options.langInfo, this.documentEventHandlers = {}, this.$dropzone = n()(['<div class="note-dropzone">', '<div class="note-dropzone-message"/>', "</div>"].join("")).prependTo(this.$editor);
              }

              var _proto11 = dropzone.prototype;

              _proto11.initialize = function initialize() {
                this.options.disableDragAndDrop ? (this.documentEventHandlers.onDrop = function (t) {
                  t.preventDefault();
                }, this.$eventListener = this.$dropzone, this.$eventListener.on("drop", this.documentEventHandlers.onDrop)) : this.attachDragAndDropEvent();
              };

              _proto11.attachDragAndDropEvent = function attachDragAndDropEvent() {
                var _this13 = this;

                var t = n()();
                var e = this.$dropzone.find(".note-dropzone-message");
                this.documentEventHandlers.onDragenter = function (o) {
                  var i = _this13.context.invoke("codeview.isActivated"),
                      n = _this13.$editor.width() > 0 && _this13.$editor.height() > 0;

                  i || t.length || !n || (_this13.$editor.addClass("dragover"), _this13.$dropzone.width(_this13.$editor.width()), _this13.$dropzone.height(_this13.$editor.height()), e.text(_this13.lang.image.dragImageHere)), t = t.add(o.target);
                }, this.documentEventHandlers.onDragleave = function (e) {
                  t = t.not(e.target), t.length && "BODY" !== e.target.nodeName || (t = n()(), _this13.$editor.removeClass("dragover"));
                }, this.documentEventHandlers.onDrop = function () {
                  t = n()(), _this13.$editor.removeClass("dragover");
                }, this.$eventListener.on("dragenter", this.documentEventHandlers.onDragenter).on("dragleave", this.documentEventHandlers.onDragleave).on("drop", this.documentEventHandlers.onDrop), this.$dropzone.on("dragenter", function () {
                  _this13.$dropzone.addClass("hover"), e.text(_this13.lang.image.dropImage);
                }).on("dragleave", function () {
                  _this13.$dropzone.removeClass("hover"), e.text(_this13.lang.image.dragImageHere);
                }), this.$dropzone.on("drop", function (t) {
                  var e = t.originalEvent.dataTransfer;
                  t.preventDefault(), e && e.files && e.files.length ? (_this13.$editable.focus(), _this13.context.invoke("editor.insertImagesOrCallback", e.files)) : n.a.each(e.types, function (t, o) {
                    if (o.toLowerCase().indexOf("_moz_") > -1) return;
                    var i = e.getData(o);
                    o.toLowerCase().indexOf("text") > -1 ? _this13.context.invoke("editor.pasteHTML", i) : n()(i).each(function (t, e) {
                      _this13.context.invoke("editor.insertNode", e);
                    });
                  });
                }).on("dragover", !1);
              };

              _proto11.destroy = function destroy() {
                var _this14 = this;

                Object.keys(this.documentEventHandlers).forEach(function (t) {
                  _this14.$eventListener.off(t.substr(2).toLowerCase(), _this14.documentEventHandlers[t]);
                }), this.documentEventHandlers = {};
              };

              return dropzone;
            }(),
            codeview:
            /*#__PURE__*/
            function () {
              function codeview(t) {
                this.context = t, this.$editor = t.layoutInfo.editor, this.$editable = t.layoutInfo.editable, this.$codable = t.layoutInfo.codable, this.options = t.options;
              }

              var _proto12 = codeview.prototype;

              _proto12.sync = function sync() {
                this.isActivated() && f.hasCodeMirror && this.$codable.data("cmEditor").save();
              };

              _proto12.isActivated = function isActivated() {
                return this.$editor.hasClass("codeview");
              };

              _proto12.toggle = function toggle() {
                this.isActivated() ? this.deactivate() : this.activate(), this.context.triggerEvent("codeview.toggled");
              };

              _proto12.purify = function purify(t) {
                if (this.options.codeviewFilter && (t = t.replace(this.options.codeviewFilterRegex, ""), this.options.codeviewIframeFilter)) {
                  var _e18 = this.options.codeviewIframeWhitelistSrc.concat(this.options.codeviewIframeWhitelistSrcBase);

                  t = t.replace(/(<iframe.*?>.*?(?:<\/iframe>)?)/gi, function (t) {
                    if (/<.+src(?==?('|"|\s)?)[\s\S]+src(?=('|"|\s)?)[^>]*?>/i.test(t)) return "";

                    for (var _iterator = _e18, _isArray = Array.isArray(_iterator), _i15 = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                      var _ref;

                      if (_isArray) {
                        if (_i15 >= _iterator.length) break;
                        _ref = _iterator[_i15++];
                      } else {
                        _i15 = _iterator.next();
                        if (_i15.done) break;
                        _ref = _i15.value;
                      }

                      var _o20 = _ref;
                      if (new RegExp('src="(https?:)?//' + _o20.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&") + '/(.+)"').test(t)) return t;
                    }

                    return "";
                  });
                }

                return t;
              };

              _proto12.activate = function activate() {
                var _this15 = this;

                if (this.$codable.val(ut.html(this.$editable, this.options.prettifyHtml)), this.$codable.height(this.$editable.height()), this.context.invoke("toolbar.updateCodeview", !0), this.$editor.addClass("codeview"), this.$codable.focus(), f.hasCodeMirror) {
                  var _t40 = It.fromTextArea(this.$codable[0], this.options.codemirror);

                  if (this.options.codemirror.tern) {
                    var _e19 = new It.TernServer(this.options.codemirror.tern);

                    _t40.ternServer = _e19, _t40.on("cursorActivity", function (t) {
                      _e19.updateArgHints(t);
                    });
                  }

                  _t40.on("blur", function (e) {
                    _this15.context.triggerEvent("blur.codeview", _t40.getValue(), e);
                  }), _t40.on("change", function (e) {
                    _this15.context.triggerEvent("change.codeview", _t40.getValue(), _t40);
                  }), _t40.setSize(null, this.$editable.outerHeight()), this.$codable.data("cmEditor", _t40);
                } else this.$codable.on("blur", function (t) {
                  _this15.context.triggerEvent("blur.codeview", _this15.$codable.val(), t);
                }), this.$codable.on("input", function (t) {
                  _this15.context.triggerEvent("change.codeview", _this15.$codable.val(), _this15.$codable);
                });
              };

              _proto12.deactivate = function deactivate() {
                if (f.hasCodeMirror) {
                  var _t41 = this.$codable.data("cmEditor");

                  this.$codable.val(_t41.getValue()), _t41.toTextArea();
                }

                var t = this.purify(ut.value(this.$codable, this.options.prettifyHtml) || ut.emptyPara),
                    e = this.$editable.html() !== t;
                this.$editable.html(t), this.$editable.height(this.options.height ? this.$codable.height() : "auto"), this.$editor.removeClass("codeview"), e && this.context.triggerEvent("change", this.$editable.html(), this.$editable), this.$editable.focus(), this.context.invoke("toolbar.updateCodeview", !1);
              };

              _proto12.destroy = function destroy() {
                this.isActivated() && this.deactivate();
              };

              return codeview;
            }(),
            statusbar:
            /*#__PURE__*/
            function () {
              function statusbar(t) {
                this.$document = n()(document), this.$statusbar = t.layoutInfo.statusbar, this.$editable = t.layoutInfo.editable, this.options = t.options;
              }

              var _proto13 = statusbar.prototype;

              _proto13.initialize = function initialize() {
                var _this16 = this;

                this.options.airMode || this.options.disableResizeEditor ? this.destroy() : this.$statusbar.on("mousedown", function (t) {
                  t.preventDefault(), t.stopPropagation();

                //   var e = _this16.$editable.offset().top - _this16.$document.scrollTop(),
                //       o = function o(t) {
                //     var o = t.clientY - (e + 24);
                //     o = _this16.options.minheight > 0 ? Math.max(o, _this16.options.minheight) : o, o = _this16.options.maxHeight > 0 ? Math.min(o, _this16.options.maxHeight) : o, _this16.$editable.height(o);
                //   };

                  _this16.$document.on("mousemove", o).one("mouseup", function () {
                    _this16.$document.off("mousemove", o);
                  });
                });
              };

              _proto13.destroy = function destroy() {
                this.$statusbar.off(), this.$statusbar.addClass("locked");
              };

              return statusbar;
            }(),
            fullscreen:
            /*#__PURE__*/
            function () {
              function fullscreen(t) {
                var _this17 = this;

                this.context = t, this.$editor = t.layoutInfo.editor, this.$toolbar = t.layoutInfo.toolbar, this.$editable = t.layoutInfo.editable, this.$codable = t.layoutInfo.codable, this.$window = n()(window), this.$scrollbar = n()("html, body"), this.onResize = function () {
                  _this17.resizeTo({
                    h: _this17.$window.height() - _this17.$toolbar.outerHeight()
                  });
                };
              }

              var _proto14 = fullscreen.prototype;

              _proto14.resizeTo = function resizeTo(t) {
                this.$editable.css("height", t.h), this.$codable.css("height", t.h), this.$codable.data("cmeditor") && this.$codable.data("cmeditor").setsize(null, t.h);
              };

              _proto14.toggle = function toggle() {
                this.$editor.toggleClass("fullscreen"), this.isFullscreen() ? (this.$editable.data("orgHeight", this.$editable.css("height")), this.$editable.data("orgMaxHeight", this.$editable.css("maxHeight")), this.$editable.css("maxHeight", ""), this.$window.on("resize", this.onResize).trigger("resize"), this.$scrollbar.css("overflow", "hidden")) : (this.$window.off("resize", this.onResize), this.resizeTo({
                  h: this.$editable.data("orgHeight")
                }), this.$editable.css("maxHeight", this.$editable.css("orgMaxHeight")), this.$scrollbar.css("overflow", "visible")), this.context.invoke("toolbar.updateFullscreen", this.isFullscreen());
              };

              _proto14.isFullscreen = function isFullscreen() {
                return this.$editor.hasClass("fullscreen");
              };

              return fullscreen;
            }(),
            handle:
            /*#__PURE__*/
            function () {
              function handle(t) {
                var _this18 = this;

                this.context = t, this.$document = n()(document), this.$editingArea = t.layoutInfo.editingArea, this.options = t.options, this.lang = this.options.langInfo, this.events = {
                  "summernote.mousedown": function summernoteMousedown(t, e) {
                    _this18.update(e.target, e) && e.preventDefault();
                  },
                  "summernote.keyup summernote.scroll summernote.change summernote.dialog.shown": function summernoteKeyupSummernoteScrollSummernoteChangeSummernoteDialogShown() {
                    _this18.update();
                  },
                  "summernote.disable summernote.blur": function summernoteDisableSummernoteBlur() {
                    _this18.hide();
                  },
                  "summernote.codeview.toggled": function summernoteCodeviewToggled() {
                    _this18.update();
                  }
                };
              }

              var _proto15 = handle.prototype;

              _proto15.initialize = function initialize() {
                var _this19 = this;

                this.$handle = n()(['<div class="note-handle">', '<div class="note-control-selection">', '<div class="note-control-selection-bg"></div>', '<div class="note-control-holder note-control-nw"></div>', '<div class="note-control-holder note-control-ne"></div>', '<div class="note-control-holder note-control-sw"></div>', '<div class="', this.options.disableResizeImage ? "note-control-holder" : "note-control-sizing", ' note-control-se"></div>', this.options.disableResizeImage ? "" : '<div class="note-control-selection-info"></div>', "</div>", "</div>"].join("")).prependTo(this.$editingArea), this.$handle.on("mousedown", function (t) {
                  if (ut.isControlSizing(t.target)) {
                    t.preventDefault(), t.stopPropagation();

                    var _e20 = _this19.$handle.find(".note-control-selection").data("target"),
                        _o21 = _e20.offset(),
                        _i16 = _this19.$document.scrollTop(),
                        _n11 = function _n11(t) {
                      _this19.context.invoke("editor.resizeTo", {
                        x: t.clientX - _o21.left,
                        y: t.clientY - (_o21.top - _i16)
                      }, _e20, !t.shiftKey), _this19.update(_e20[0], t);
                    };

                    _this19.$document.on("mousemove", _n11).one("mouseup", function (t) {
                      t.preventDefault(), _this19.$document.off("mousemove", _n11), _this19.context.invoke("editor.afterCommand");
                    }), _e20.data("ratio") || _e20.data("ratio", _e20.height() / _e20.width());
                  }
                }), this.$handle.on("wheel", function (t) {
                  t.preventDefault(), _this19.update();
                });
              };

              _proto15.destroy = function destroy() {
                this.$handle.remove();
              };

              _proto15.update = function update(t, e) {
                if (this.context.isDisabled()) return !1;
                var o = ut.isImg(t),
                    i = this.$handle.find(".note-control-selection");

                if (this.context.invoke("imagePopover.update", t, e), o) {
                  var _e21 = n()(t),
                      _o22 = _e21.position(),
                      _s6 = {
                    left: _o22.left + parseInt(_e21.css("marginLeft"), 10),
                    top: _o22.top + parseInt(_e21.css("marginTop"), 10)
                  },
                      _r4 = {
                    w: _e21.outerWidth(!1),
                    h: _e21.outerHeight(!1)
                  };

                  i.css({
                    display: "block",
                    left: _s6.left,
                    top: _s6.top,
                    width: _r4.w,
                    height: _r4.h
                  }).data("target", _e21);

                  var _a4 = new Image();

                  _a4.src = _e21.attr("src");

                  var _l5 = _r4.w + "x" + _r4.h + " (" + this.lang.image.original + ": " + _a4.width + "x" + _a4.height + ")";

                  i.find(".note-control-selection-info").text(_l5), this.context.invoke("editor.saveTarget", t);
                } else this.hide();

                return o;
              };

              _proto15.hide = function hide() {
                this.context.invoke("editor.clearTarget"), this.$handle.children().hide();
              };

              return handle;
            }(),
            hintPopover:
            /*#__PURE__*/
            function () {
              function hintPopover(t) {
                var _this20 = this;

                this.context = t, this.ui = n.a.summernote.ui, this.$editable = t.layoutInfo.editable, this.options = t.options, this.hint = this.options.hint || [], this.direction = this.options.hintDirection || "bottom", this.hints = Array.isArray(this.hint) ? this.hint : [this.hint], this.events = {
                  "summernote.keyup": function summernoteKeyup(t, e) {
                    e.isDefaultPrevented() || _this20.handleKeyup(e);
                  },
                  "summernote.keydown": function summernoteKeydown(t, e) {
                    _this20.handleKeydown(e);
                  },
                  "summernote.disable summernote.dialog.shown summernote.blur": function summernoteDisableSummernoteDialogShownSummernoteBlur() {
                    _this20.hide();
                  }
                };
              }

              var _proto16 = hintPopover.prototype;

              _proto16.shouldInitialize = function shouldInitialize() {
                return this.hints.length > 0;
              };

              _proto16.initialize = function initialize() {
                var _this21 = this;

                this.lastWordRange = null, this.matchingWord = null, this.$popover = this.ui.popover({
                  className: "note-hint-popover",
                  hideArrow: !0,
                  direction: ""
                }).render().appendTo(this.options.container), this.$popover.hide(), this.$content = this.$popover.find(".popover-content,.note-popover-content"), this.$content.on("click", ".note-hint-item", function (t) {
                  _this21.$content.find(".active").removeClass("active"), n()(t.currentTarget).addClass("active"), _this21.replace();
                }), this.$popover.on("mousedown", function (t) {
                  t.preventDefault();
                });
              };

              _proto16.destroy = function destroy() {
                this.$popover.remove();
              };

              _proto16.selectItem = function selectItem(t) {
                this.$content.find(".active").removeClass("active"), t.addClass("active"), this.$content[0].scrollTop = t[0].offsetTop - this.$content.innerHeight() / 2;
              };

              _proto16.moveDown = function moveDown() {
                var t = this.$content.find(".note-hint-item.active"),
                    e = t.next();
                if (e.length) this.selectItem(e);else {
                  var _e22 = t.parent().next();

                  _e22.length || (_e22 = this.$content.find(".note-hint-group").first()), this.selectItem(_e22.find(".note-hint-item").first());
                }
              };

              _proto16.moveUp = function moveUp() {
                var t = this.$content.find(".note-hint-item.active"),
                    e = t.prev();
                if (e.length) this.selectItem(e);else {
                  var _e23 = t.parent().prev();

                  _e23.length || (_e23 = this.$content.find(".note-hint-group").last()), this.selectItem(_e23.find(".note-hint-item").last());
                }
              };

              _proto16.replace = function replace() {
                var t = this.$content.find(".note-hint-item.active");

                if (t.length) {
                  var e = this.nodeFromItem(t);
                  if (null !== this.matchingWord && 0 === this.matchingWord.length) this.lastWordRange.so = this.lastWordRange.eo;else if (null !== this.matchingWord && this.matchingWord.length > 0 && !this.lastWordRange.isCollapsed()) {
                    var _t42 = this.lastWordRange.eo - this.lastWordRange.so - this.matchingWord.length;

                    _t42 > 0 && (this.lastWordRange.so += _t42);
                  }

                  if (this.lastWordRange.insertNode(e), "next" === this.options.hintSelect) {
                    var o = document.createTextNode("");
                    n()(e).after(o), bt.createFromNodeBefore(o).select();
                  } else bt.createFromNodeAfter(e).select();

                  this.lastWordRange = null, this.hide(), this.context.invoke("editor.focus");
                }
              };

              _proto16.nodeFromItem = function nodeFromItem(t) {
                var e = this.hints[t.data("index")],
                    o = t.data("item");
                var i = e.content ? e.content(o) : o;
                return "string" == typeof i && (i = ut.createText(i)), i;
              };

              _proto16.createItemTemplates = function createItemTemplates(t, e) {
                var o = this.hints[t];
                return e.map(function (e, i) {
                  var s = n()('<div class="note-hint-item"/>');
                  return s.append(o.template ? o.template(e) : e + ""), s.data({
                    index: t,
                    item: e
                  }), s;
                });
              };

              _proto16.handleKeydown = function handleKeydown(t) {
                this.$popover.is(":visible") && (t.keyCode === kt.code.ENTER ? (t.preventDefault(), this.replace()) : t.keyCode === kt.code.UP ? (t.preventDefault(), this.moveUp()) : t.keyCode === kt.code.DOWN && (t.preventDefault(), this.moveDown()));
              };

              _proto16.searchKeyword = function searchKeyword(t, e, o) {
                var i = this.hints[t];

                if (i && i.match.test(e) && i.search) {
                  var _t43 = i.match.exec(e);

                  this.matchingWord = _t43[0], i.search(_t43[1], o);
                } else o();
              };

              _proto16.createGroup = function createGroup(t, e) {
                var _this22 = this;

                var o = n()('<div class="note-hint-group note-hint-group-' + t + '"/>');
                return this.searchKeyword(t, e, function (e) {
                  (e = e || []).length && (o.html(_this22.createItemTemplates(t, e)), _this22.show());
                }), o;
              };

              _proto16.handleKeyup = function handleKeyup(t) {
                var _this23 = this;

                if (!y.contains([kt.code.ENTER, kt.code.UP, kt.code.DOWN], t.keyCode)) {
                  var _t44,
                      _e24,
                      _o23 = this.context.invoke("editor.getLastRange");

                  if ("words" === this.options.hintMode) {
                    if (_t44 = _o23.getWordsRange(_o23), _e24 = _t44.toString(), this.hints.forEach(function (i) {
                      if (i.match.test(_e24)) return _t44 = _o23.getWordsMatchRange(i.match), !1;
                    }), !_t44) return void this.hide();
                    _e24 = _t44.toString();
                  } else _t44 = _o23.getWordRange(), _e24 = _t44.toString();

                  if (this.hints.length && _e24) {
                    this.$content.empty();

                    var _o24 = b.rect2bnd(y.last(_t44.getClientRects())),
                        _i17 = n()(this.options.container).offset();

                    _o24 && (_o24.top -= _i17.top, _o24.left -= _i17.left, this.$popover.hide(), this.lastWordRange = _t44, this.hints.forEach(function (t, o) {
                      t.match.test(_e24) && _this23.createGroup(o, _e24).appendTo(_this23.$content);
                    }), this.$content.find(".note-hint-item:first").addClass("active"), "top" === this.direction ? this.$popover.css({
                      left: _o24.left,
                      top: _o24.top - this.$popover.outerHeight() - 5
                    }) : this.$popover.css({
                      left: _o24.left,
                      top: _o24.top + _o24.height + 5
                    }));
                  } else this.hide();
                }
              };

              _proto16.show = function show() {
                this.$popover.show();
              };

              _proto16.hide = function hide() {
                this.$popover.hide();
              };

              return hintPopover;
            }(),
            autoLink:
            /*#__PURE__*/
            function () {
              function autoLink(t) {
                var _this24 = this;

                this.context = t, this.events = {
                  "summernote.keyup": function summernoteKeyup(t, e) {
                    e.isDefaultPrevented() || _this24.handleKeyup(e);
                  },
                  "summernote.keydown": function summernoteKeydown(t, e) {
                    _this24.handleKeydown(e);
                  }
                };
              }

              var _proto17 = autoLink.prototype;

              _proto17.initialize = function initialize() {
                this.lastWordRange = null;
              };

              _proto17.destroy = function destroy() {
                this.lastWordRange = null;
              };

              _proto17.replace = function replace() {
                if (!this.lastWordRange) return;
                var t = this.lastWordRange.toString(),
                    e = t.match(Nt);

                if (e && (e[1] || e[2])) {
                  var _o25 = e[1] ? t : "http://" + t,
                      _i18 = t.replace(/^(?:https?:\/\/)?(?:tel?:?)?(?:mailto?:?)?(?:www\.)?/i, "").split("/")[0],
                      _s7 = n()("<a />").html(_i18).attr("href", _o25)[0];

                  this.context.options.linkTargetBlank && n()(_s7).attr("target", "_blank"), this.lastWordRange.insertNode(_s7), this.lastWordRange = null, this.context.invoke("editor.focus");
                }
              };

              _proto17.handleKeydown = function handleKeydown(t) {
                if (y.contains([kt.code.ENTER, kt.code.SPACE], t.keyCode)) {
                  var _t45 = this.context.invoke("editor.createRange").getWordRange();

                  this.lastWordRange = _t45;
                }
              };

              _proto17.handleKeyup = function handleKeyup(t) {
                y.contains([kt.code.ENTER, kt.code.SPACE], t.keyCode) && this.replace();
              };

              return autoLink;
            }(),
            autoSync:
            /*#__PURE__*/
            function () {
              function autoSync(t) {
                var _this25 = this;

                this.$note = t.layoutInfo.note, this.events = {
                  "summernote.change": function summernoteChange() {
                    _this25.$note.val(t.invoke("code"));
                  }
                };
              }

              var _proto18 = autoSync.prototype;

              _proto18.shouldInitialize = function shouldInitialize() {
                return ut.isTextarea(this.$note[0]);
              };

              return autoSync;
            }(),
            autoReplace:
            /*#__PURE__*/
            function () {
              function autoReplace(t) {
                var _this26 = this;

                this.context = t, this.options = t.options.replace || {}, this.keys = [kt.code.ENTER, kt.code.SPACE, kt.code.PERIOD, kt.code.COMMA, kt.code.SEMICOLON, kt.code.SLASH], this.previousKeydownCode = null, this.events = {
                  "summernote.keyup": function summernoteKeyup(t, e) {
                    e.isDefaultPrevented() || _this26.handleKeyup(e);
                  },
                  "summernote.keydown": function summernoteKeydown(t, e) {
                    _this26.handleKeydown(e);
                  }
                };
              }

              var _proto19 = autoReplace.prototype;

              _proto19.shouldInitialize = function shouldInitialize() {
                return !!this.options.match;
              };

              _proto19.initialize = function initialize() {
                this.lastWord = null;
              };

              _proto19.destroy = function destroy() {
                this.lastWord = null;
              };

              _proto19.replace = function replace() {
                if (!this.lastWord) return;
                var t = this,
                    e = this.lastWord.toString();
                this.options.match(e, function (e) {
                  if (e) {
                    var _o26 = "";
                    if ("string" == typeof e ? _o26 = ut.createText(e) : _instanceof(e, jQuery) ? _o26 = e[0] : _instanceof(e, Node) && (_o26 = e), !_o26) return;
                    t.lastWord.insertNode(_o26), t.lastWord = null, t.context.invoke("editor.focus");
                  }
                });
              };

              _proto19.handleKeydown = function handleKeydown(t) {
                if (this.previousKeydownCode && y.contains(this.keys, this.previousKeydownCode)) this.previousKeydownCode = t.keyCode;else {
                  if (y.contains(this.keys, t.keyCode)) {
                    var _t46 = this.context.invoke("editor.createRange").getWordRange();

                    this.lastWord = _t46;
                  }

                  this.previousKeydownCode = t.keyCode;
                }
              };

              _proto19.handleKeyup = function handleKeyup(t) {
                y.contains(this.keys, t.keyCode) && this.replace();
              };

              return autoReplace;
            }(),
            placeholder:
            /*#__PURE__*/
            function () {
              function placeholder(t) {
                var _this27 = this;

                this.context = t, this.$editingArea = t.layoutInfo.editingArea, this.options = t.options, !0 === this.options.inheritPlaceholder && (this.options.placeholder = this.context.$note.attr("placeholder") || this.options.placeholder), this.events = {
                  "summernote.init summernote.change": function summernoteInitSummernoteChange() {
                    _this27.update();
                  },
                  "summernote.codeview.toggled": function summernoteCodeviewToggled() {
                    _this27.update();
                  }
                };
              }

              var _proto20 = placeholder.prototype;

              _proto20.shouldInitialize = function shouldInitialize() {
                return !!this.options.placeholder;
              };

              _proto20.initialize = function initialize() {
                var _this28 = this;

                this.$placeholder = n()('<div class="note-placeholder">'), this.$placeholder.on("click", function () {
                  _this28.context.invoke("focus");
                }).html(this.options.placeholder).prependTo(this.$editingArea), this.update();
              };

              _proto20.destroy = function destroy() {
                this.$placeholder.remove();
              };

              _proto20.update = function update() {
                var t = !this.context.invoke("codeview.isActivated") && this.context.invoke("editor.isEmpty");
                this.$placeholder.toggle(t);
              };

              return placeholder;
            }(),
            buttons:
            /*#__PURE__*/
            function () {
              function buttons(t) {
                this.ui = n.a.summernote.ui, this.context = t, this.$toolbar = t.layoutInfo.toolbar, this.options = t.options, this.lang = this.options.langInfo, this.invertedKeyMap = b.invertObject(this.options.keyMap[f.isMac ? "mac" : "pc"]);
              }

              var _proto21 = buttons.prototype;

              _proto21.representShortcut = function representShortcut(t) {
                var e = this.invertedKeyMap[t];
                return this.options.shortcuts && e ? (f.isMac && (e = e.replace("CMD", "⌘").replace("SHIFT", "⇧")), e = e.replace("BACKSLASH", "\\").replace("SLASH", "/").replace("LEFTBRACKET", "[").replace("RIGHTBRACKET", "]"), " (" + e + ")") : "";
              };

              _proto21.button = function button(t) {
                return !this.options.tooltip && t.tooltip && delete t.tooltip, t.container = this.options.container, this.ui.button(t);
              };

              _proto21.initialize = function initialize() {
                this.addToolbarButtons(), this.addImagePopoverButtons(), this.addLinkPopoverButtons(), this.addTablePopoverButtons(), this.fontInstalledMap = {};
              };

              _proto21.destroy = function destroy() {
                delete this.fontInstalledMap;
              };

              _proto21.isFontInstalled = function isFontInstalled(t) {
                return this.fontInstalledMap.hasOwnProperty(t) || (this.fontInstalledMap[t] = f.isFontInstalled(t) || y.contains(this.options.fontNamesIgnoreCheck, t)), this.fontInstalledMap[t];
              };

              _proto21.isFontDeservedToAdd = function isFontDeservedToAdd(t) {
                return "" !== (t = t.toLowerCase()) && this.isFontInstalled(t) && -1 === f.genericFontFamilies.indexOf(t);
              };

              _proto21.colorPalette = function colorPalette(t, e, o, i) {
                var _this29 = this;

                return this.ui.buttonGroup({
                  className: "note-color " + t,
                  children: [this.button({
                    className: "note-current-color-button",
                    contents: this.ui.icon(this.options.icons.font + " note-recent-color"),
                    tooltip: e,
                    click: function click(t) {
                      var e = n()(t.currentTarget);
                      o && i ? _this29.context.invoke("editor.color", {
                        backColor: e.attr("data-backColor"),
                        foreColor: e.attr("data-foreColor")
                      }) : o ? _this29.context.invoke("editor.color", {
                        backColor: e.attr("data-backColor")
                      }) : i && _this29.context.invoke("editor.color", {
                        foreColor: e.attr("data-foreColor")
                      });
                    },
                    callback: function callback(t) {
                      var e = t.find(".note-recent-color");
                      o && (e.css("background-color", _this29.options.colorButton.backColor), t.attr("data-backColor", _this29.options.colorButton.backColor)), i ? (e.css("color", _this29.options.colorButton.foreColor), t.attr("data-foreColor", _this29.options.colorButton.foreColor)) : e.css("color", "transparent");
                    }
                  }), this.button({
                    className: "dropdown-toggle",
                    contents: this.ui.dropdownButtonContents("", this.options),
                    tooltip: this.lang.color.more,
                    data: {
                      toggle: "dropdown"
                    }
                  }), this.ui.dropdown({
                    items: (o ? ['<div class="note-palette">', '<div class="note-palette-title">' + this.lang.color.background + "</div>", "<div>", '<button type="button" class="note-color-reset btn btn-light" data-event="backColor" data-value="inherit">', this.lang.color.transparent, "</button>", "</div>", '<div class="note-holder" data-event="backColor"/>', "<div>", '<button type="button" class="note-color-select btn" data-event="openPalette" data-value="backColorPicker">', this.lang.color.cpSelect, "</button>", '<input type="color" id="backColorPicker" class="note-btn note-color-select-btn" value="' + this.options.colorButton.backColor + '" data-event="backColorPalette">', "</div>", '<div class="note-holder-custom" id="backColorPalette" data-event="backColor"/>', "</div>"].join("") : "") + (i ? ['<div class="note-palette">', '<div class="note-palette-title">' + this.lang.color.foreground + "</div>", "<div>", '<button type="button" class="note-color-reset btn btn-light" data-event="removeFormat" data-value="foreColor">', this.lang.color.resetToDefault, "</button>", "</div>", '<div class="note-holder" data-event="foreColor"/>', "<div>", '<button type="button" class="note-color-select btn" data-event="openPalette" data-value="foreColorPicker">', this.lang.color.cpSelect, "</button>", '<input type="color" id="foreColorPicker" class="note-btn note-color-select-btn" value="' + this.options.colorButton.foreColor + '" data-event="foreColorPalette">', "</div>", '<div class="note-holder-custom" id="foreColorPalette" data-event="foreColor"/>', "</div>"].join("") : ""),
                    callback: function callback(t) {
                      t.find(".note-holder").each(function (t, e) {
                        var o = n()(e);
                        o.append(_this29.ui.palette({
                          colors: _this29.options.colors,
                          colorsName: _this29.options.colorsName,
                          eventName: o.data("event"),
                          container: _this29.options.container,
                          tooltip: _this29.options.tooltip
                        }).render());
                      });
                      var e = [["#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]];
                      t.find(".note-holder-custom").each(function (t, o) {
                        var i = n()(o);
                        i.append(_this29.ui.palette({
                          colors: e,
                          colorsName: e,
                          eventName: i.data("event"),
                          container: _this29.options.container,
                          tooltip: _this29.options.tooltip
                        }).render());
                      }), t.find("input[type=color]").each(function (e, o) {
                        n()(o).change(function () {
                          var e = t.find("#" + n()(this).data("event")).find(".note-color-btn").first(),
                              o = this.value.toUpperCase();
                          e.css("background-color", o).attr("aria-label", o).attr("data-value", o).attr("data-original-title", o), e.click();
                        });
                      });
                    },
                    click: function click(e) {
                      e.stopPropagation();
                      var o = n()("." + t).find(".show"),
                          i = n()(e.target),
                          s = i.data("event");
                      var r = i.attr("data-value");

                      if ("openPalette" === s) {
                        var _t47 = o.find("#" + r),
                            _e25 = n()(o.find("#" + _t47.data("event")).find(".note-color-row")[0]),
                            _i19 = _e25.find(".note-color-btn").last().detach(),
                            _s8 = _t47.val();

                        _i19.css("background-color", _s8).attr("aria-label", _s8).attr("data-value", _s8).attr("data-original-title", _s8), _e25.prepend(_i19), _t47.click();
                      } else if (y.contains(["backColor", "foreColor"], s)) {
                        var _t48 = "backColor" === s ? "background-color" : "color",
                            _e26 = i.closest(".note-color").find(".note-recent-color"),
                            _o27 = i.closest(".note-color").find(".note-current-color-button");

                        _e26.css(_t48, r), _o27.attr("data-" + s, r), _this29.context.invoke("editor." + s, r);
                      }
                    }
                  })]
                }).render();
              };

              _proto21.addToolbarButtons = function addToolbarButtons() {
                var _this30 = this;

                this.context.memo("button.style", function () {
                  return _this30.ui.buttonGroup([_this30.button({
                    className: "dropdown-toggle",
                    contents: _this30.ui.dropdownButtonContents(_this30.ui.icon(_this30.options.icons.magic), _this30.options),
                    tooltip: _this30.lang.style.style,
                    data: {
                      toggle: "dropdown"
                    }
                  }), _this30.ui.dropdown({
                    className: "dropdown-style",
                    items: _this30.options.styleTags,
                    title: _this30.lang.style.style,
                    template: function template(t) {
                      "string" == typeof t && (t = {
                        tag: t,
                        title: _this30.lang.style.hasOwnProperty(t) ? _this30.lang.style[t] : t
                      });
                      var e = t.tag,
                          o = t.title;
                      return "<" + e + (t.style ? ' style="' + t.style + '" ' : "") + (t.className ? ' class="' + t.className + '"' : "") + ">" + o + "</" + e + ">";
                    },
                    click: _this30.context.createInvokeHandler("editor.formatBlock")
                  })]).render();
                });

                var _loop = function _loop(_t49, _e27) {
                  var e = _this30.options.styleTags[_t49];

                  _this30.context.memo("button.style." + e, function () {
                    return _this30.button({
                      className: "note-btn-style-" + e,
                      contents: '<div data-value="' + e + '">' + e.toUpperCase() + "</div>",
                      tooltip: _this30.lang.style[e],
                      click: _this30.context.createInvokeHandler("editor.formatBlock")
                    }).render();
                  });
                };

                for (var _t49 = 0, _e27 = this.options.styleTags.length; _t49 < _e27; _t49++) {
                  _loop(_t49, _e27);
                }

                this.context.memo("button.bold", function () {
                  return _this30.button({
                    className: "note-btn-bold",
                    contents: _this30.ui.icon(_this30.options.icons.bold),
                    tooltip: _this30.lang.font.bold + _this30.representShortcut("bold"),
                    click: _this30.context.createInvokeHandlerAndUpdateState("editor.bold")
                  }).render();
                }), this.context.memo("button.italic", function () {
                  return _this30.button({
                    className: "note-btn-italic",
                    contents: _this30.ui.icon(_this30.options.icons.italic),
                    tooltip: _this30.lang.font.italic + _this30.representShortcut("italic"),
                    click: _this30.context.createInvokeHandlerAndUpdateState("editor.italic")
                  }).render();
                }), this.context.memo("button.underline", function () {
                  return _this30.button({
                    className: "note-btn-underline",
                    contents: _this30.ui.icon(_this30.options.icons.underline),
                    tooltip: _this30.lang.font.underline + _this30.representShortcut("underline"),
                    click: _this30.context.createInvokeHandlerAndUpdateState("editor.underline")
                  }).render();
                }), this.context.memo("button.clear", function () {
                  return _this30.button({
                    contents: _this30.ui.icon(_this30.options.icons.eraser),
                    tooltip: _this30.lang.font.clear + _this30.representShortcut("removeFormat"),
                    click: _this30.context.createInvokeHandler("editor.removeFormat")
                  }).render();
                }), this.context.memo("button.strikethrough", function () {
                  return _this30.button({
                    className: "note-btn-strikethrough",
                    contents: _this30.ui.icon(_this30.options.icons.strikethrough),
                    tooltip: _this30.lang.font.strikethrough + _this30.representShortcut("strikethrough"),
                    click: _this30.context.createInvokeHandlerAndUpdateState("editor.strikethrough")
                  }).render();
                }), this.context.memo("button.superscript", function () {
                  return _this30.button({
                    className: "note-btn-superscript",
                    contents: _this30.ui.icon(_this30.options.icons.superscript),
                    tooltip: _this30.lang.font.superscript,
                    click: _this30.context.createInvokeHandlerAndUpdateState("editor.superscript")
                  }).render();
                }), this.context.memo("button.subscript", function () {
                  return _this30.button({
                    className: "note-btn-subscript",
                    contents: _this30.ui.icon(_this30.options.icons.subscript),
                    tooltip: _this30.lang.font.subscript,
                    click: _this30.context.createInvokeHandlerAndUpdateState("editor.subscript")
                  }).render();
                }), this.context.memo("button.fontname", function () {
                  var t = _this30.context.invoke("editor.currentStyle");

                  return _this30.options.addDefaultFonts && n.a.each(t["font-family"].split(","), function (t, e) {
                    e = e.trim().replace(/['"]+/g, ""), _this30.isFontDeservedToAdd(e) && -1 === _this30.options.fontNames.indexOf(e) && _this30.options.fontNames.push(e);
                  }), _this30.ui.buttonGroup([_this30.button({
                    className: "dropdown-toggle",
                    contents: _this30.ui.dropdownButtonContents('<span class="note-current-fontname"/>', _this30.options),
                    tooltip: _this30.lang.font.name,
                    data: {
                      toggle: "dropdown"
                    }
                  }), _this30.ui.dropdownCheck({
                    className: "dropdown-fontname",
                    checkClassName: _this30.options.icons.menuCheck,
                    items: _this30.options.fontNames.filter(_this30.isFontInstalled.bind(_this30)),
                    title: _this30.lang.font.name,
                    template: function template(t) {
                      return '<span style="font-family: ' + f.validFontName(t) + '">' + t + "</span>";
                    },
                    click: _this30.context.createInvokeHandlerAndUpdateState("editor.fontName")
                  })]).render();
                }), this.context.memo("button.fontsize", function () {
                  return _this30.ui.buttonGroup([_this30.button({
                    className: "dropdown-toggle",
                    contents: _this30.ui.dropdownButtonContents('<span class="note-current-fontsize"/>', _this30.options),
                    tooltip: _this30.lang.font.size,
                    data: {
                      toggle: "dropdown"
                    }
                  }), _this30.ui.dropdownCheck({
                    className: "dropdown-fontsize",
                    checkClassName: _this30.options.icons.menuCheck,
                    items: _this30.options.fontSizes,
                    title: _this30.lang.font.size,
                    click: _this30.context.createInvokeHandlerAndUpdateState("editor.fontSize")
                  })]).render();
                }), this.context.memo("button.fontsizeunit", function () {
                  return _this30.ui.buttonGroup([_this30.button({
                    className: "dropdown-toggle",
                    contents: _this30.ui.dropdownButtonContents('<span class="note-current-fontsizeunit"/>', _this30.options),
                    tooltip: _this30.lang.font.sizeunit,
                    data: {
                      toggle: "dropdown"
                    }
                  }), _this30.ui.dropdownCheck({
                    className: "dropdown-fontsizeunit",
                    checkClassName: _this30.options.icons.menuCheck,
                    items: _this30.options.fontSizeUnits,
                    title: _this30.lang.font.sizeunit,
                    click: _this30.context.createInvokeHandlerAndUpdateState("editor.fontSizeUnit")
                  })]).render();
                }), this.context.memo("button.color", function () {
                  return _this30.colorPalette("note-color-all", _this30.lang.color.recent, !0, !0);
                }), this.context.memo("button.forecolor", function () {
                  return _this30.colorPalette("note-color-fore", _this30.lang.color.foreground, !1, !0);
                }), this.context.memo("button.backcolor", function () {
                  return _this30.colorPalette("note-color-back", _this30.lang.color.background, !0, !1);
                }), this.context.memo("button.ul", function () {
                  return _this30.button({
                    contents: _this30.ui.icon(_this30.options.icons.unorderedlist),
                    tooltip: _this30.lang.lists.unordered + _this30.representShortcut("insertUnorderedList"),
                    click: _this30.context.createInvokeHandler("editor.insertUnorderedList")
                  }).render();
                }), this.context.memo("button.ol", function () {
                  return _this30.button({
                    contents: _this30.ui.icon(_this30.options.icons.orderedlist),
                    tooltip: _this30.lang.lists.ordered + _this30.representShortcut("insertOrderedList"),
                    click: _this30.context.createInvokeHandler("editor.insertOrderedList")
                  }).render();
                });
                var t = this.button({
                  contents: this.ui.icon(this.options.icons.alignLeft),
                  tooltip: this.lang.paragraph.left + this.representShortcut("justifyLeft"),
                  click: this.context.createInvokeHandler("editor.justifyLeft")
                }),
                    e = this.button({
                  contents: this.ui.icon(this.options.icons.alignCenter),
                  tooltip: this.lang.paragraph.center + this.representShortcut("justifyCenter"),
                  click: this.context.createInvokeHandler("editor.justifyCenter")
                }),
                    o = this.button({
                  contents: this.ui.icon(this.options.icons.alignRight),
                  tooltip: this.lang.paragraph.right + this.representShortcut("justifyRight"),
                  click: this.context.createInvokeHandler("editor.justifyRight")
                }),
                    i = this.button({
                  contents: this.ui.icon(this.options.icons.alignJustify),
                  tooltip: this.lang.paragraph.justify + this.representShortcut("justifyFull"),
                  click: this.context.createInvokeHandler("editor.justifyFull")
                }),
                    s = this.button({
                  contents: this.ui.icon(this.options.icons.outdent),
                  tooltip: this.lang.paragraph.outdent + this.representShortcut("outdent"),
                  click: this.context.createInvokeHandler("editor.outdent")
                }),
                    r = this.button({
                  contents: this.ui.icon(this.options.icons.indent),
                  tooltip: this.lang.paragraph.indent + this.representShortcut("indent"),
                  click: this.context.createInvokeHandler("editor.indent")
                });
                this.context.memo("button.justifyLeft", b.invoke(t, "render")), this.context.memo("button.justifyCenter", b.invoke(e, "render")), this.context.memo("button.justifyRight", b.invoke(o, "render")), this.context.memo("button.justifyFull", b.invoke(i, "render")), this.context.memo("button.outdent", b.invoke(s, "render")), this.context.memo("button.indent", b.invoke(r, "render")), this.context.memo("button.paragraph", function () {
                  return _this30.ui.buttonGroup([_this30.button({
                    className: "dropdown-toggle",
                    contents: _this30.ui.dropdownButtonContents(_this30.ui.icon(_this30.options.icons.alignLeft), _this30.options),
                    tooltip: _this30.lang.paragraph.paragraph,
                    data: {
                      toggle: "dropdown"
                    }
                  }), _this30.ui.dropdown([_this30.ui.buttonGroup({
                    className: "note-align",
                    children: [t, e, o, i]
                  }), _this30.ui.buttonGroup({
                    className: "note-list",
                    children: [s, r]
                  })])]).render();
                }), this.context.memo("button.height", function () {
                  return _this30.ui.buttonGroup([_this30.button({
                    className: "dropdown-toggle",
                    contents: _this30.ui.dropdownButtonContents(_this30.ui.icon(_this30.options.icons.textHeight), _this30.options),
                    tooltip: _this30.lang.font.height,
                    data: {
                      toggle: "dropdown"
                    }
                  }), _this30.ui.dropdownCheck({
                    items: _this30.options.lineHeights,
                    checkClassName: _this30.options.icons.menuCheck,
                    className: "dropdown-line-height",
                    title: _this30.lang.font.height,
                    click: _this30.context.createInvokeHandler("editor.lineHeight")
                  })]).render();
                }), this.context.memo("button.table", function () {
                  return _this30.ui.buttonGroup([_this30.button({
                    className: "dropdown-toggle",
                    contents: _this30.ui.dropdownButtonContents(_this30.ui.icon(_this30.options.icons.table), _this30.options),
                    tooltip: _this30.lang.table.table,
                    data: {
                      toggle: "dropdown"
                    }
                  }), _this30.ui.dropdown({
                    title: _this30.lang.table.table,
                    className: "note-table",
                    items: ['<div class="note-dimension-picker">', '<div class="note-dimension-picker-mousecatcher" data-event="insertTable" data-value="1x1"/>', '<div class="note-dimension-picker-highlighted"/>', '<div class="note-dimension-picker-unhighlighted"/>', "</div>", '<div class="note-dimension-display">1 x 1</div>'].join("")
                  })], {
                    callback: function callback(t) {
                      t.find(".note-dimension-picker-mousecatcher").css({
                        width: _this30.options.insertTableMaxSize.col + "em",
                        height: _this30.options.insertTableMaxSize.row + "em"
                      }).mousedown(_this30.context.createInvokeHandler("editor.insertTable")).on("mousemove", _this30.tableMoveHandler.bind(_this30));
                    }
                  }).render();
                }), this.context.memo("button.link", function () {
                  return _this30.button({
                    contents: _this30.ui.icon(_this30.options.icons.link),
                    tooltip: _this30.lang.link.link + _this30.representShortcut("linkDialog.show"),
                    click: _this30.context.createInvokeHandler("linkDialog.show")
                  }).render();
                }), this.context.memo("button.picture", function () {
                  return _this30.button({
                    contents: _this30.ui.icon(_this30.options.icons.picture),
                    tooltip: _this30.lang.image.image,
                    click: _this30.context.createInvokeHandler("imageDialog.show")
                  }).render();
                }), this.context.memo("button.video", function () {
                  return _this30.button({
                    contents: _this30.ui.icon(_this30.options.icons.video),
                    tooltip: _this30.lang.video.video,
                    click: _this30.context.createInvokeHandler("videoDialog.show")
                  }).render();
                }), this.context.memo("button.hr", function () {
                  return _this30.button({
                    contents: _this30.ui.icon(_this30.options.icons.minus),
                    tooltip: _this30.lang.hr.insert + _this30.representShortcut("insertHorizontalRule"),
                    click: _this30.context.createInvokeHandler("editor.insertHorizontalRule")
                  }).render();
                }), this.context.memo("button.fullscreen", function () {
                  return _this30.button({
                    className: "btn-fullscreen",
                    contents: _this30.ui.icon(_this30.options.icons.arrowsAlt),
                    tooltip: _this30.lang.options.fullscreen,
                    click: _this30.context.createInvokeHandler("fullscreen.toggle")
                  }).render();
                }), this.context.memo("button.codeview", function () {
                  return _this30.button({
                    className: "btn-codeview",
                    contents: _this30.ui.icon(_this30.options.icons.code),
                    tooltip: _this30.lang.options.codeview,
                    click: _this30.context.createInvokeHandler("codeview.toggle")
                  }).render();
                }), this.context.memo("button.redo", function () {
                  return _this30.button({
                    contents: _this30.ui.icon(_this30.options.icons.redo),
                    tooltip: _this30.lang.history.redo + _this30.representShortcut("redo"),
                    click: _this30.context.createInvokeHandler("editor.redo")
                  }).render();
                }), this.context.memo("button.undo", function () {
                  return _this30.button({
                    contents: _this30.ui.icon(_this30.options.icons.undo),
                    tooltip: _this30.lang.history.undo + _this30.representShortcut("undo"),
                    click: _this30.context.createInvokeHandler("editor.undo")
                  }).render();
                }), this.context.memo("button.help", function () {
                  return _this30.button({
                    contents: _this30.ui.icon(_this30.options.icons.question),
                    tooltip: _this30.lang.options.help,
                    click: _this30.context.createInvokeHandler("helpDialog.show")
                  }).render();
                });
              };

              _proto21.addImagePopoverButtons = function addImagePopoverButtons() {
                var _this31 = this;

                this.context.memo("button.resizeFull", function () {
                  return _this31.button({
                    contents: '<span class="note-fontsize-10">100%</span>',
                    tooltip: _this31.lang.image.resizeFull,
                    click: _this31.context.createInvokeHandler("editor.resize", "1")
                  }).render();
                }), this.context.memo("button.resizeHalf", function () {
                  return _this31.button({
                    contents: '<span class="note-fontsize-10">50%</span>',
                    tooltip: _this31.lang.image.resizeHalf,
                    click: _this31.context.createInvokeHandler("editor.resize", "0.5")
                  }).render();
                }), this.context.memo("button.resizeQuarter", function () {
                  return _this31.button({
                    contents: '<span class="note-fontsize-10">25%</span>',
                    tooltip: _this31.lang.image.resizeQuarter,
                    click: _this31.context.createInvokeHandler("editor.resize", "0.25")
                  }).render();
                }), this.context.memo("button.resizeNone", function () {
                  return _this31.button({
                    contents: _this31.ui.icon(_this31.options.icons.rollback),
                    tooltip: _this31.lang.image.resizeNone,
                    click: _this31.context.createInvokeHandler("editor.resize", "0")
                  }).render();
                }), this.context.memo("button.floatLeft", function () {
                  return _this31.button({
                    contents: _this31.ui.icon(_this31.options.icons.floatLeft),
                    tooltip: _this31.lang.image.floatLeft,
                    click: _this31.context.createInvokeHandler("editor.floatMe", "left")
                  }).render();
                }), this.context.memo("button.floatRight", function () {
                  return _this31.button({
                    contents: _this31.ui.icon(_this31.options.icons.floatRight),
                    tooltip: _this31.lang.image.floatRight,
                    click: _this31.context.createInvokeHandler("editor.floatMe", "right")
                  }).render();
                }), this.context.memo("button.floatNone", function () {
                  return _this31.button({
                    contents: _this31.ui.icon(_this31.options.icons.rollback),
                    tooltip: _this31.lang.image.floatNone,
                    click: _this31.context.createInvokeHandler("editor.floatMe", "none")
                  }).render();
                }), this.context.memo("button.removeMedia", function () {
                  return _this31.button({
                    contents: _this31.ui.icon(_this31.options.icons.trash),
                    tooltip: _this31.lang.image.remove,
                    click: _this31.context.createInvokeHandler("editor.removeMedia")
                  }).render();
                });
              };

              _proto21.addLinkPopoverButtons = function addLinkPopoverButtons() {
                var _this32 = this;

                this.context.memo("button.linkDialogShow", function () {
                  return _this32.button({
                    contents: _this32.ui.icon(_this32.options.icons.link),
                    tooltip: _this32.lang.link.edit,
                    click: _this32.context.createInvokeHandler("linkDialog.show")
                  }).render();
                }), this.context.memo("button.unlink", function () {
                  return _this32.button({
                    contents: _this32.ui.icon(_this32.options.icons.unlink),
                    tooltip: _this32.lang.link.unlink,
                    click: _this32.context.createInvokeHandler("editor.unlink")
                  }).render();
                });
              };

              _proto21.addTablePopoverButtons = function addTablePopoverButtons() {
                var _this33 = this;

                this.context.memo("button.addRowUp", function () {
                  return _this33.button({
                    className: "btn-md",
                    contents: _this33.ui.icon(_this33.options.icons.rowAbove),
                    tooltip: _this33.lang.table.addRowAbove,
                    click: _this33.context.createInvokeHandler("editor.addRow", "top")
                  }).render();
                }), this.context.memo("button.addRowDown", function () {
                  return _this33.button({
                    className: "btn-md",
                    contents: _this33.ui.icon(_this33.options.icons.rowBelow),
                    tooltip: _this33.lang.table.addRowBelow,
                    click: _this33.context.createInvokeHandler("editor.addRow", "bottom")
                  }).render();
                }), this.context.memo("button.addColLeft", function () {
                  return _this33.button({
                    className: "btn-md",
                    contents: _this33.ui.icon(_this33.options.icons.colBefore),
                    tooltip: _this33.lang.table.addColLeft,
                    click: _this33.context.createInvokeHandler("editor.addCol", "left")
                  }).render();
                }), this.context.memo("button.addColRight", function () {
                  return _this33.button({
                    className: "btn-md",
                    contents: _this33.ui.icon(_this33.options.icons.colAfter),
                    tooltip: _this33.lang.table.addColRight,
                    click: _this33.context.createInvokeHandler("editor.addCol", "right")
                  }).render();
                }), this.context.memo("button.deleteRow", function () {
                  return _this33.button({
                    className: "btn-md",
                    contents: _this33.ui.icon(_this33.options.icons.rowRemove),
                    tooltip: _this33.lang.table.delRow,
                    click: _this33.context.createInvokeHandler("editor.deleteRow")
                  }).render();
                }), this.context.memo("button.deleteCol", function () {
                  return _this33.button({
                    className: "btn-md",
                    contents: _this33.ui.icon(_this33.options.icons.colRemove),
                    tooltip: _this33.lang.table.delCol,
                    click: _this33.context.createInvokeHandler("editor.deleteCol")
                  }).render();
                }), this.context.memo("button.deleteTable", function () {
                  return _this33.button({
                    className: "btn-md",
                    contents: _this33.ui.icon(_this33.options.icons.trash),
                    tooltip: _this33.lang.table.delTable,
                    click: _this33.context.createInvokeHandler("editor.deleteTable")
                  }).render();
                });
              };

              _proto21.build = function build(t, e) {
                for (var _o28 = 0, _i20 = e.length; _o28 < _i20; _o28++) {
                  var _i21 = e[_o28],
                      _n12 = Array.isArray(_i21) ? _i21[0] : _i21,
                      _s9 = Array.isArray(_i21) ? 1 === _i21.length ? [_i21[0]] : _i21[1] : [_i21],
                      _r5 = this.ui.buttonGroup({
                    className: "note-" + _n12
                  }).render();

                  for (var _t50 = 0, _e28 = _s9.length; _t50 < _e28; _t50++) {
                    var _e29 = this.context.memo("button." + _s9[_t50]);

                    _e29 && _r5.append("function" == typeof _e29 ? _e29(this.context) : _e29);
                  }

                  _r5.appendTo(t);
                }
              };

              _proto21.updateCurrentStyle = function updateCurrentStyle(t) {
                var _this34 = this;

                var e = t || this.$toolbar,
                    o = this.context.invoke("editor.currentStyle");

                if (this.updateBtnStates(e, {
                  ".note-btn-bold": function noteBtnBold() {
                    return "bold" === o["font-bold"];
                  },
                  ".note-btn-italic": function noteBtnItalic() {
                    return "italic" === o["font-italic"];
                  },
                  ".note-btn-underline": function noteBtnUnderline() {
                    return "underline" === o["font-underline"];
                  },
                  ".note-btn-subscript": function noteBtnSubscript() {
                    return "subscript" === o["font-subscript"];
                  },
                  ".note-btn-superscript": function noteBtnSuperscript() {
                    return "superscript" === o["font-superscript"];
                  },
                  ".note-btn-strikethrough": function noteBtnStrikethrough() {
                    return "strikethrough" === o["font-strikethrough"];
                  }
                }), o["font-family"]) {
                  var _t51 = o["font-family"].split(",").map(function (t) {
                    return t.replace(/[\'\"]/g, "").replace(/\s+$/, "").replace(/^\s+/, "");
                  }),
                      _i22 = y.find(_t51, this.isFontInstalled.bind(this));

                  e.find(".dropdown-fontname a").each(function (t, e) {
                    var o = n()(e),
                        s = o.data("value") + "" == _i22 + "";

                    o.toggleClass("checked", s);
                  }), e.find(".note-current-fontname").text(_i22).css("font-family", _i22);
                }

                if (o["font-size"]) {
                  var _t52 = o["font-size"];
                  e.find(".dropdown-fontsize a").each(function (e, o) {
                    var i = n()(o),
                        s = i.data("value") + "" == _t52 + "";

                    i.toggleClass("checked", s);
                  }), e.find(".note-current-fontsize").text(_t52);
                  var _i23 = o["font-size-unit"];
                  e.find(".dropdown-fontsizeunit a").each(function (t, e) {
                    var o = n()(e),
                        s = o.data("value") + "" == _i23 + "";

                    o.toggleClass("checked", s);
                  }), e.find(".note-current-fontsizeunit").text(_i23);
                }

                if (o["line-height"]) {
                  var _t53 = o["line-height"];
                  e.find(".dropdown-line-height li a").each(function (e, o) {
                    var i = n()(o).data("value") + "" == _t53 + "";

                    _this34.className = i ? "checked" : "";
                  });
                }
              };

              _proto21.updateBtnStates = function updateBtnStates(t, e) {
                var _this35 = this;

                n.a.each(e, function (e, o) {
                  _this35.ui.toggleBtnActive(t.find(e), o());
                });
              };

              _proto21.tableMoveHandler = function tableMoveHandler(t) {
                var e = n()(t.target.parentNode),
                    o = e.next(),
                    i = e.find(".note-dimension-picker-mousecatcher"),
                    s = e.find(".note-dimension-picker-highlighted"),
                    r = e.find(".note-dimension-picker-unhighlighted");
                var a;

                if (void 0 === t.offsetX) {
                  var _e30 = n()(t.target).offset();

                  a = {
                    x: t.pageX - _e30.left,
                    y: t.pageY - _e30.top
                  };
                } else a = {
                  x: t.offsetX,
                  y: t.offsetY
                };

                var l = Math.ceil(a.x / 18) || 1,
                    c = Math.ceil(a.y / 18) || 1;
                s.css({
                  width: l + "em",
                  height: c + "em"
                }), i.data("value", l + "x" + c), l > 3 && l < this.options.insertTableMaxSize.col && r.css({
                  width: l + 1 + "em"
                }), c > 3 && c < this.options.insertTableMaxSize.row && r.css({
                  height: c + 1 + "em"
                }), o.html(l + " x " + c);
              };

              return buttons;
            }(),
            toolbar:
            /*#__PURE__*/
            function () {
              function toolbar(t) {
                this.context = t, this.$window = n()(window), this.$document = n()(document), this.ui = n.a.summernote.ui, this.$note = t.layoutInfo.note, this.$editor = t.layoutInfo.editor, this.$toolbar = t.layoutInfo.toolbar, this.$editable = t.layoutInfo.editable, this.$statusbar = t.layoutInfo.statusbar, this.options = t.options, this.isFollowing = !1, this.followScroll = this.followScroll.bind(this);
              }

              var _proto22 = toolbar.prototype;

              _proto22.shouldInitialize = function shouldInitialize() {
                return !this.options.airMode;
              };

              _proto22.initialize = function initialize() {
                var _this36 = this;

                this.options.toolbar = this.options.toolbar || [], this.options.toolbar.length ? this.context.invoke("buttons.build", this.$toolbar, this.options.toolbar) : this.$toolbar.hide(), this.options.toolbarContainer && this.$toolbar.appendTo(this.options.toolbarContainer), this.changeContainer(!1), this.$note.on("summernote.keyup summernote.mouseup summernote.change", function () {
                  _this36.context.invoke("buttons.updateCurrentStyle");
                }), this.context.invoke("buttons.updateCurrentStyle"), this.options.followingToolbar && this.$window.on("scroll resize", this.followScroll);
              };

              _proto22.destroy = function destroy() {
                this.$toolbar.children().remove(), this.options.followingToolbar && this.$window.off("scroll resize", this.followScroll);
              };

              _proto22.followScroll = function followScroll() {
                if (this.$editor.hasClass("fullscreen")) return !1;
                var t = this.$editor.outerHeight(),
                    e = this.$editor.width(),
                    o = this.$toolbar.height(),
                    i = this.$statusbar.height();
                var s = 0;
                this.options.otherStaticBar && (s = n()(this.options.otherStaticBar).outerHeight());
                var r = this.$document.scrollTop(),
                    a = this.$editor.offset().top,
                    l = a - s,
                    c = a + t - s - o - i;
                !this.isFollowing && r > l && r < c - o ? (this.isFollowing = !0, this.$toolbar.css({
                  position: "fixed",
                  top: s,
                  width: e,
                  zIndex: 1e3
                }), this.$editable.css({
                  marginTop: this.$toolbar.height() + 5
                })) : this.isFollowing && (r < l || r > c) && (this.isFollowing = !1, this.$toolbar.css({
                  position: "relative",
                  top: 0,
                  width: "100%",
                  zIndex: "auto"
                }), this.$editable.css({
                  marginTop: ""
                }));
              };

              _proto22.changeContainer = function changeContainer(t) {
                t ? this.$toolbar.prependTo(this.$editor) : this.options.toolbarContainer && this.$toolbar.appendTo(this.options.toolbarContainer), this.options.followingToolbar && this.followScroll();
              };

              _proto22.updateFullscreen = function updateFullscreen(t) {
                this.ui.toggleBtnActive(this.$toolbar.find(".btn-fullscreen"), t), this.changeContainer(t);
              };

              _proto22.updateCodeview = function updateCodeview(t) {
                this.ui.toggleBtnActive(this.$toolbar.find(".btn-codeview"), t), t ? this.deactivate() : this.activate();
              };

              _proto22.activate = function activate(t) {
                var e = this.$toolbar.find("button");
                t || (e = e.not(".btn-codeview").not(".btn-fullscreen")), this.ui.toggleBtn(e, !0);
              };

              _proto22.deactivate = function deactivate(t) {
                var e = this.$toolbar.find("button");
                t || (e = e.not(".btn-codeview").not(".btn-fullscreen")), this.ui.toggleBtn(e, !1);
              };

              return toolbar;
            }(),
            linkDialog:
            /*#__PURE__*/
            function () {
              function linkDialog(t) {
                this.context = t, this.ui = n.a.summernote.ui, this.$body = n()(document.body), this.$editor = t.layoutInfo.editor, this.options = t.options, this.lang = this.options.langInfo, t.memo("help.linkDialog.show", this.options.langInfo.help["linkDialog.show"]);
              }

              var _proto23 = linkDialog.prototype;

              _proto23.initialize = function initialize() {
                var t = this.options.dialogsInBody ? this.$body : this.options.container,
                    e = ['<div class="form-group note-form-group">', "<label for=\"note-dialog-link-txt-" + this.options.id + "\" class=\"note-form-label\">" + this.lang.link.textToDisplay + "</label>", "<input id=\"note-dialog-link-txt-" + this.options.id + "\" class=\"note-link-text form-control note-form-control note-input\" type=\"text\"/>", "</div>", '<div class="form-group note-form-group">', "<label for=\"note-dialog-link-url-" + this.options.id + "\" class=\"note-form-label\">" + this.lang.link.url + "</label>", "<input id=\"note-dialog-link-url-" + this.options.id + "\" class=\"note-link-url form-control note-form-control note-input\" type=\"text\" value=\"http://\"/>", "</div>", this.options.disableLinkTarget ? "" : n()("<div/>").append(this.ui.checkbox({
                  className: "sn-checkbox-open-in-new-window",
                  text: this.lang.link.openInNewWindow,
                  checked: !0
                }).render()).html(), n()("<div/>").append(this.ui.checkbox({
                  className: "sn-checkbox-use-protocol",
                  text: this.lang.link.useProtocol,
                  checked: !0
                }).render()).html()].join(""),
                    o = "<input type=\"button\" href=\"#\" class=\"btn btn-primary note-btn note-btn-primary note-link-btn\" value=\"" + this.lang.link.insert + "\" disabled>";
                this.$dialog = this.ui.dialog({
                  className: "link-dialog",
                  title: this.lang.link.insert,
                  fade: this.options.dialogsFade,
                  body: e,
                  footer: o
                }).render().appendTo(t);
              };

              _proto23.destroy = function destroy() {
                this.ui.hideDialog(this.$dialog), this.$dialog.remove();
              };

              _proto23.bindEnterKey = function bindEnterKey(t, e) {
                t.on("keypress", function (t) {
                  t.keyCode === kt.code.ENTER && (t.preventDefault(), e.trigger("click"));
                });
              };

              _proto23.toggleLinkBtn = function toggleLinkBtn(t, e, o) {
                this.ui.toggleBtn(t, e.val() && o.val());
              };

              _proto23.showLinkDialog = function showLinkDialog(t) {
                var _this37 = this;

                return n.a.Deferred(function (e) {
                  var o = _this37.$dialog.find(".note-link-text"),
                      i = _this37.$dialog.find(".note-link-url"),
                      n = _this37.$dialog.find(".note-link-btn"),
                      s = _this37.$dialog.find(".sn-checkbox-open-in-new-window input[type=checkbox]"),
                      r = _this37.$dialog.find(".sn-checkbox-use-protocol input[type=checkbox]");

                  _this37.ui.onDialogShown(_this37.$dialog, function () {
                    _this37.context.triggerEvent("dialog.shown"), !t.url && b.isValidUrl(t.text) && (t.url = t.text), o.on("input paste propertychange", function () {
                      t.text = o.val(), _this37.toggleLinkBtn(n, o, i);
                    }).val(t.text), i.on("input paste propertychange", function () {
                      t.text || o.val(i.val()), _this37.toggleLinkBtn(n, o, i);
                    }).val(t.url), f.isSupportTouch || i.trigger("focus"), _this37.toggleLinkBtn(n, o, i), _this37.bindEnterKey(i, n), _this37.bindEnterKey(o, n);
                    var a = void 0 !== t.isNewWindow ? t.isNewWindow : _this37.context.options.linkTargetBlank;
                    s.prop("checked", a);
                    var l = !t.url && _this37.context.options.useProtocol;
                    r.prop("checked", l), n.one("click", function (n) {
                      n.preventDefault(), e.resolve({
                        range: t.range,
                        url: i.val(),
                        text: o.val(),
                        isNewWindow: s.is(":checked"),
                        checkProtocol: r.is(":checked")
                      }), _this37.ui.hideDialog(_this37.$dialog);
                    });
                  }), _this37.ui.onDialogHidden(_this37.$dialog, function () {
                    o.off(), i.off(), n.off(), "pending" === e.state() && e.reject();
                  }), _this37.ui.showDialog(_this37.$dialog);
                }).promise();
              };

              _proto23.show = function show() {
                var _this38 = this;

                var t = this.context.invoke("editor.getLinkInfo");
                this.context.invoke("editor.saveRange"), this.showLinkDialog(t).then(function (t) {
                  _this38.context.invoke("editor.restoreRange"), _this38.context.invoke("editor.createLink", t);
                }).fail(function () {
                  _this38.context.invoke("editor.restoreRange");
                });
              };

              return linkDialog;
            }(),
            linkPopover:
            /*#__PURE__*/
            function () {
              function linkPopover(t) {
                var _this39 = this;

                this.context = t, this.ui = n.a.summernote.ui, this.options = t.options, this.events = {
                  "summernote.keyup summernote.mouseup summernote.change summernote.scroll": function summernoteKeyupSummernoteMouseupSummernoteChangeSummernoteScroll() {
                    _this39.update();
                  },
                  "summernote.disable summernote.dialog.shown summernote.blur": function summernoteDisableSummernoteDialogShownSummernoteBlur() {
                    _this39.hide();
                  }
                };
              }

              var _proto24 = linkPopover.prototype;

              _proto24.shouldInitialize = function shouldInitialize() {
                return !y.isEmpty(this.options.popover.link);
              };

              _proto24.initialize = function initialize() {
                this.$popover = this.ui.popover({
                  className: "note-link-popover",
                  callback: function callback(t) {
                    t.find(".popover-content,.note-popover-content").prepend('<span><a target="_blank"></a>&nbsp;</span>');
                  }
                }).render().appendTo(this.options.container);
                var t = this.$popover.find(".popover-content,.note-popover-content");
                this.context.invoke("buttons.build", t, this.options.popover.link), this.$popover.on("mousedown", function (t) {
                  t.preventDefault();
                });
              };

              _proto24.destroy = function destroy() {
                this.$popover.remove();
              };

              _proto24.update = function update() {
                if (!this.context.invoke("editor.hasFocus")) return void this.hide();
                var t = this.context.invoke("editor.getLastRange");

                if (t.isCollapsed() && t.isOnAnchor()) {
                  var _e31 = ut.ancestor(t.sc, ut.isAnchor),
                      _o29 = n()(_e31).attr("href");

                  this.$popover.find("a").attr("href", _o29).html(_o29);

                  var _i24 = ut.posFromPlaceholder(_e31),
                      _s10 = n()(this.options.container).offset();

                  _i24.top -= _s10.top, _i24.left -= _s10.left, this.$popover.css({
                    display: "block",
                    left: _i24.left,
                    top: _i24.top
                  });
                } else this.hide();
              };

              _proto24.hide = function hide() {
                this.$popover.hide();
              };

              return linkPopover;
            }(),
            imageDialog:
            /*#__PURE__*/
            function () {
              function imageDialog(t) {
                this.context = t, this.ui = n.a.summernote.ui, this.$body = n()(document.body), this.$editor = t.layoutInfo.editor, this.options = t.options, this.lang = this.options.langInfo;
              }

              var _proto25 = imageDialog.prototype;

              _proto25.initialize = function initialize() {
                var t = "";

                if (this.options.maximumImageFileSize) {
                  var _e32 = Math.floor(Math.log(this.options.maximumImageFileSize) / Math.log(1024)),
                      _o30 = 1 * (this.options.maximumImageFileSize / Math.pow(1024, _e32)).toFixed(2) + " " + " KMGTP"[_e32] + "B";

                  t = "<small>" + (this.lang.image.maximumFileSize + " : " + _o30) + "</small>";
                }

                var e = this.options.dialogsInBody ? this.$body : this.options.container,
                    o = ['<div class="form-group note-form-group note-group-select-from-files">', '<label for="note-dialog-image-file-' + this.options.id + '" class="note-form-label">' + this.lang.image.selectFromFiles + "</label>", '<input id="note-dialog-image-file-' + this.options.id + '" class="note-image-input form-control-file note-form-control note-input" ', ' type="file" name="files" accept="image/*" multiple="multiple"/>', t, "</div>", '<div class="form-group note-group-image-url">', '<label for="note-dialog-image-url-' + this.options.id + '" class="note-form-label">' + this.lang.image.url + "</label>", '<input id="note-dialog-image-url-' + this.options.id + '" class="note-image-url form-control note-form-control note-input" type="text"/>', "</div>"].join(""),
                    i = "<input type=\"button\" href=\"#\" class=\"btn btn-primary note-btn note-btn-primary note-image-btn\" value=\"" + this.lang.image.insert + "\" disabled>";
                this.$dialog = this.ui.dialog({
                  title: this.lang.image.insert,
                  fade: this.options.dialogsFade,
                  body: o,
                  footer: i
                }).render().appendTo(e);
              };

              _proto25.destroy = function destroy() {
                this.ui.hideDialog(this.$dialog), this.$dialog.remove();
              };

              _proto25.bindEnterKey = function bindEnterKey(t, e) {
                t.on("keypress", function (t) {
                  t.keyCode === kt.code.ENTER && (t.preventDefault(), e.trigger("click"));
                });
              };

              _proto25.show = function show() {
                var _this40 = this;

                this.context.invoke("editor.saveRange"), this.showImageDialog().then(function (t) {
                  _this40.ui.hideDialog(_this40.$dialog), _this40.context.invoke("editor.restoreRange"), "string" == typeof t ? _this40.options.callbacks.onImageLinkInsert ? _this40.context.triggerEvent("image.link.insert", t) : _this40.context.invoke("editor.insertImage", t) : _this40.context.invoke("editor.insertImagesOrCallback", t);
                }).fail(function () {
                  _this40.context.invoke("editor.restoreRange");
                });
              };

              _proto25.showImageDialog = function showImageDialog() {
                var _this41 = this;

                return n.a.Deferred(function (t) {
                  var e = _this41.$dialog.find(".note-image-input"),
                      o = _this41.$dialog.find(".note-image-url"),
                      i = _this41.$dialog.find(".note-image-btn");

                  _this41.ui.onDialogShown(_this41.$dialog, function () {
                    _this41.context.triggerEvent("dialog.shown"), e.replaceWith(e.clone().on("change", function (e) {
                      t.resolve(e.target.files || e.target.value);
                    }).val("")), o.on("input paste propertychange", function () {
                      _this41.ui.toggleBtn(i, o.val());
                    }).val(""), f.isSupportTouch || o.trigger("focus"), i.click(function (e) {
                      e.preventDefault(), t.resolve(o.val());
                    }), _this41.bindEnterKey(o, i);
                  }), _this41.ui.onDialogHidden(_this41.$dialog, function () {
                    e.off(), o.off(), i.off(), "pending" === t.state() && t.reject();
                  }), _this41.ui.showDialog(_this41.$dialog);
                });
              };

              return imageDialog;
            }(),
            imagePopover:
            /*#__PURE__*/
            function () {
              function imagePopover(t) {
                var _this42 = this;

                this.context = t, this.ui = n.a.summernote.ui, this.editable = t.layoutInfo.editable[0], this.options = t.options, this.events = {
                  "summernote.disable summernote.blur": function summernoteDisableSummernoteBlur() {
                    _this42.hide();
                  }
                };
              }

              var _proto26 = imagePopover.prototype;

              _proto26.shouldInitialize = function shouldInitialize() {
                return !y.isEmpty(this.options.popover.image);
              };

              _proto26.initialize = function initialize() {
                this.$popover = this.ui.popover({
                  className: "note-image-popover"
                }).render().appendTo(this.options.container);
                var t = this.$popover.find(".popover-content,.note-popover-content");
                this.context.invoke("buttons.build", t, this.options.popover.image), this.$popover.on("mousedown", function (t) {
                  t.preventDefault();
                });
              };

              _proto26.destroy = function destroy() {
                this.$popover.remove();
              };

              _proto26.update = function update(t, e) {
                if (ut.isImg(t)) {
                  var _o31 = n()(t).offset(),
                      _i25 = n()(this.options.container).offset();

                  var _s11 = {};
                  this.options.popatmouse ? (_s11.left = e.pageX - 20, _s11.top = e.pageY) : _s11 = _o31, _s11.top -= _i25.top, _s11.left -= _i25.left, this.$popover.css({
                    display: "block",
                    left: _s11.left,
                    top: _s11.top
                  });
                } else this.hide();
              };

              _proto26.hide = function hide() {
                this.$popover.hide();
              };

              return imagePopover;
            }(),
            tablePopover:
            /*#__PURE__*/
            function () {
              function tablePopover(t) {
                var _this43 = this;

                this.context = t, this.ui = n.a.summernote.ui, this.options = t.options, this.events = {
                  "summernote.mousedown": function summernoteMousedown(t, e) {
                    _this43.update(e.target);
                  },
                  "summernote.keyup summernote.scroll summernote.change": function summernoteKeyupSummernoteScrollSummernoteChange() {
                    _this43.update();
                  },
                  "summernote.disable summernote.blur": function summernoteDisableSummernoteBlur() {
                    _this43.hide();
                  }
                };
              }

              var _proto27 = tablePopover.prototype;

              _proto27.shouldInitialize = function shouldInitialize() {
                return !y.isEmpty(this.options.popover.table);
              };

              _proto27.initialize = function initialize() {
                this.$popover = this.ui.popover({
                  className: "note-table-popover"
                }).render().appendTo(this.options.container);
                var t = this.$popover.find(".popover-content,.note-popover-content");
                this.context.invoke("buttons.build", t, this.options.popover.table), f.isFF && document.execCommand("enableInlineTableEditing", !1, !1), this.$popover.on("mousedown", function (t) {
                  t.preventDefault();
                });
              };

              _proto27.destroy = function destroy() {
                this.$popover.remove();
              };

              _proto27.update = function update(t) {
                if (this.context.isDisabled()) return !1;
                var e = ut.isCell(t);

                if (e) {
                  var _e33 = ut.posFromPlaceholder(t),
                      _o32 = n()(this.options.container).offset();

                  _e33.top -= _o32.top, _e33.left -= _o32.left, this.$popover.css({
                    display: "block",
                    left: _e33.left,
                    top: _e33.top
                  });
                } else this.hide();

                return e;
              };

              _proto27.hide = function hide() {
                this.$popover.hide();
              };

              return tablePopover;
            }(),
            videoDialog:
            /*#__PURE__*/
            function () {
              function videoDialog(t) {
                this.context = t, this.ui = n.a.summernote.ui, this.$body = n()(document.body), this.$editor = t.layoutInfo.editor, this.options = t.options, this.lang = this.options.langInfo;
              }

              var _proto28 = videoDialog.prototype;

              _proto28.initialize = function initialize() {
                var t = this.options.dialogsInBody ? this.$body : this.options.container,
                    e = ['<div class="form-group note-form-group row-fluid">', "<label for=\"note-dialog-video-url-" + this.options.id + "\" class=\"note-form-label\">" + this.lang.video.url + " <small class=\"text-muted\">" + this.lang.video.providers + "</small></label>", "<input id=\"note-dialog-video-url-" + this.options.id + "\" class=\"note-video-url form-control note-form-control note-input\" type=\"text\"/>", "</div>"].join(""),
                    o = "<input type=\"button\" href=\"#\" class=\"btn btn-primary note-btn note-btn-primary note-video-btn\" value=\"" + this.lang.video.insert + "\" disabled>";
                this.$dialog = this.ui.dialog({
                  title: this.lang.video.insert,
                  fade: this.options.dialogsFade,
                  body: e,
                  footer: o
                }).render().appendTo(t);
              };

              _proto28.destroy = function destroy() {
                this.ui.hideDialog(this.$dialog), this.$dialog.remove();
              };

              _proto28.bindEnterKey = function bindEnterKey(t, e) {
                t.on("keypress", function (t) {
                  t.keyCode === kt.code.ENTER && (t.preventDefault(), e.trigger("click"));
                });
              };

              _proto28.createVideoNode = function createVideoNode(t) {
                var e = /^(?:(\d+)h)?(?:(\d+)m)?(?:(\d+)s)?$/,
                    o = t.match(/\/\/(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))([\w|-]{11})(?:(?:[\?&]t=)(\S+))?$/),
                    i = t.match(/(?:www\.|\/\/)instagram\.com\/p\/(.[a-zA-Z0-9_-]*)/),
                    s = t.match(/\/\/vine\.co\/v\/([a-zA-Z0-9]+)/),
                    r = t.match(/\/\/(player\.)?vimeo\.com\/([a-z]*\/)*(\d+)[?]?.*/),
                    a = t.match(/.+dailymotion.com\/(video|hub)\/([^_]+)[^#]*(#video=([^_&]+))?/),
                    l = t.match(/\/\/v\.youku\.com\/v_show\/id_(\w+)=*\.html/),
                    c = t.match(/\/\/v\.qq\.com.*?vid=(.+)/),
                    d = t.match(/\/\/v\.qq\.com\/x?\/?(page|cover).*?\/([^\/]+)\.html\??.*/),
                    h = t.match(/^.+.(mp4|m4v)$/),
                    u = t.match(/^.+.(ogg|ogv)$/),
                    p = t.match(/^.+.(webm)$/),
                    m = t.match(/(?:www\.|\/\/)facebook\.com\/([^\/]+)\/videos\/([0-9]+)/);
                var f;

                if (o && 11 === o[1].length) {
                  var _t54 = o[1];
                  var g = 0;

                  if (void 0 !== o[2]) {
                    var _t55 = o[2].match(e);

                    if (_t55) for (var b = [3600, 60, 1], v = 0, k = b.length; v < k; v++) {
                      g += void 0 !== _t55[v + 1] ? b[v] * parseInt(_t55[v + 1], 10) : 0;
                    }
                  }

                  f = n()("<iframe>").attr("frameborder", 0).attr("src", "//www.youtube.com/embed/" + _t54 + (g > 0 ? "?start=" + g : "")).attr("width", "640").attr("height", "360");
                } else if (i && i[0].length) f = n()("<iframe>").attr("frameborder", 0).attr("src", "https://instagram.com/p/" + i[1] + "/embed/").attr("width", "612").attr("height", "710").attr("scrolling", "no").attr("allowtransparency", "true");else if (s && s[0].length) f = n()("<iframe>").attr("frameborder", 0).attr("src", s[0] + "/embed/simple").attr("width", "600").attr("height", "600").attr("class", "vine-embed");else if (r && r[3].length) f = n()("<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>").attr("frameborder", 0).attr("src", "//player.vimeo.com/video/" + r[3]).attr("width", "640").attr("height", "360");else if (a && a[2].length) f = n()("<iframe>").attr("frameborder", 0).attr("src", "//www.dailymotion.com/embed/video/" + a[2]).attr("width", "640").attr("height", "360");else if (l && l[1].length) f = n()("<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>").attr("frameborder", 0).attr("height", "498").attr("width", "510").attr("src", "//player.youku.com/embed/" + l[1]);else if (c && c[1].length || d && d[2].length) {
                  var _t56 = c && c[1].length ? c[1] : d[2];

                  f = n()("<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>").attr("frameborder", 0).attr("height", "310").attr("width", "500").attr("src", "https://v.qq.com/iframe/player.html?vid=" + _t56 + "&amp;auto=0");
                } else if (h || u || p) f = n()("<video controls>").attr("src", t).attr("width", "640").attr("height", "360");else {
                  if (!m || !m[0].length) return !1;
                  f = n()("<iframe>").attr("frameborder", 0).attr("src", "https://www.facebook.com/plugins/video.php?href=" + encodeURIComponent(m[0]) + "&show_text=0&width=560").attr("width", "560").attr("height", "301").attr("scrolling", "no").attr("allowtransparency", "true");
                }

                return f.addClass("note-video-clip"), f[0];
              };

              _proto28.show = function show() {
                var _this44 = this;

                var t = this.context.invoke("editor.getSelectedText");
                this.context.invoke("editor.saveRange"), this.showVideoDialog(t).then(function (t) {
                  _this44.ui.hideDialog(_this44.$dialog), _this44.context.invoke("editor.restoreRange");

                  var e = _this44.createVideoNode(t);

                  e && _this44.context.invoke("editor.insertNode", e);
                }).fail(function () {
                  _this44.context.invoke("editor.restoreRange");
                });
              };

              _proto28.showVideoDialog = function showVideoDialog(t) {
                var _this45 = this;

                return n.a.Deferred(function (t) {
                  var e = _this45.$dialog.find(".note-video-url"),
                      o = _this45.$dialog.find(".note-video-btn");

                  _this45.ui.onDialogShown(_this45.$dialog, function () {
                    _this45.context.triggerEvent("dialog.shown"), e.on("input paste propertychange", function () {
                      _this45.ui.toggleBtn(o, e.val());
                    }), f.isSupportTouch || e.trigger("focus"), o.click(function (o) {
                      o.preventDefault(), t.resolve(e.val());
                    }), _this45.bindEnterKey(e, o);
                  }), _this45.ui.onDialogHidden(_this45.$dialog, function () {
                    e.off(), o.off(), "pending" === t.state() && t.reject();
                  }), _this45.ui.showDialog(_this45.$dialog);
                });
              };

              return videoDialog;
            }(),
            helpDialog:
            /*#__PURE__*/
            function () {
              function helpDialog(t) {
                this.context = t, this.ui = n.a.summernote.ui, this.$body = n()(document.body), this.$editor = t.layoutInfo.editor, this.options = t.options, this.lang = this.options.langInfo;
              }

              var _proto29 = helpDialog.prototype;

              _proto29.initialize = function initialize() {
                var t = this.options.dialogsInBody ? this.$body : this.options.container,
                    e = ['<p class="text-center">', '<a href="http://summernote.org/" target="_blank">Summernote 0.8.15</a> · ', '<a href="https://github.com/summernote/summernote" target="_blank">Project</a> · ', '<a href="https://github.com/summernote/summernote/issues" target="_blank">Issues</a>', "</p>"].join("");
                this.$dialog = this.ui.dialog({
                  title: this.lang.options.help,
                  fade: this.options.dialogsFade,
                  body: this.createShortcutList(),
                  footer: e,
                  callback: function callback(t) {
                    t.find(".modal-body,.note-modal-body").css({
                      "max-height": 300,
                      overflow: "scroll"
                    });
                  }
                }).render().appendTo(t);
              };

              _proto29.destroy = function destroy() {
                this.ui.hideDialog(this.$dialog), this.$dialog.remove();
              };

              _proto29.createShortcutList = function createShortcutList() {
                var _this46 = this;

                var t = this.options.keyMap[f.isMac ? "mac" : "pc"];
                return Object.keys(t).map(function (e) {
                  var o = t[e],
                      i = n()('<div><div class="help-list-item"/></div>');
                  return i.append(n()("<label><kbd>" + e + "</kdb></label>").css({
                    width: 180,
                    "margin-right": 10
                  })).append(n()("<span/>").html(_this46.context.memo("help." + o) || o)), i.html();
                }).join("");
              };

              _proto29.showHelpDialog = function showHelpDialog() {
                var _this47 = this;

                return n.a.Deferred(function (t) {
                  _this47.ui.onDialogShown(_this47.$dialog, function () {
                    _this47.context.triggerEvent("dialog.shown"), t.resolve();
                  }), _this47.ui.showDialog(_this47.$dialog);
                }).promise();
              };

              _proto29.show = function show() {
                var _this48 = this;

                this.context.invoke("editor.saveRange"), this.showHelpDialog().then(function () {
                  _this48.context.invoke("editor.restoreRange");
                });
              };

              return helpDialog;
            }(),
            airPopover:
            /*#__PURE__*/
            function () {
              function airPopover(t) {
                var _this49 = this;

                this.context = t, this.ui = n.a.summernote.ui, this.options = t.options, this.hidable = !0, this.events = {
                  "summernote.keyup summernote.mouseup summernote.scroll": function summernoteKeyupSummernoteMouseupSummernoteScroll() {
                    _this49.options.editing && _this49.update();
                  },
                  "summernote.disable summernote.change summernote.dialog.shown summernote.blur": function summernoteDisableSummernoteChangeSummernoteDialogShownSummernoteBlur() {
                    _this49.hide();
                  },
                  "summernote.focusout": function summernoteFocusout(t, e) {
                    _this49.$popover.is(":active,:focus") || _this49.hide();
                  }
                };
              }

              var _proto30 = airPopover.prototype;

              _proto30.shouldInitialize = function shouldInitialize() {
                return this.options.airMode && !y.isEmpty(this.options.popover.air);
              };

              _proto30.initialize = function initialize() {
                var _this50 = this;

                this.$popover = this.ui.popover({
                  className: "note-air-popover"
                }).render().appendTo(this.options.container);
                var t = this.$popover.find(".popover-content");
                this.context.invoke("buttons.build", t, this.options.popover.air), this.$popover.on("mousedown", function () {
                  _this50.hidable = !1;
                }), this.$popover.on("mouseup", function () {
                  _this50.hidable = !0;
                });
              };

              _proto30.destroy = function destroy() {
                this.$popover.remove();
              };

              _proto30.update = function update() {
                var t = this.context.invoke("editor.currentStyle");

                if (t.range && !t.range.isCollapsed()) {
                  var _e34 = y.last(t.range.getClientRects());

                  if (_e34) {
                    var _t57 = b.rect2bnd(_e34);

                    this.$popover.css({
                      display: "block",
                      left: Math.max(_t57.left + _t57.width / 2, 0) - 20,
                      top: _t57.top + _t57.height
                    }), this.context.invoke("buttons.updateCurrentStyle", this.$popover);
                  }
                } else this.hide();
              };

              _proto30.hide = function hide() {
                this.hidable && this.$popover.hide();
              };

              return airPopover;
            }()
          },
          buttons: {},
          lang: "en-US",
          followingToolbar: !1,
          toolbarPosition: "top",
          otherStaticBar: "",
          toolbar: [["style", ["style"]], ["font", ["bold", "underline", "clear"]], ["fontname", ["fontname"]], ["color", ["color"]], ["para", ["ul", "ol", "paragraph"]], ["table", ["table"]], ["insert", ["link", "picture", "video"]], ["view", ["fullscreen", "codeview", "help"]]],
          popatmouse: !0,
          popover: {
            image: [["resize", ["resizeFull", "resizeHalf", "resizeQuarter", "resizeNone"]], ["float", ["floatLeft", "floatRight", "floatNone"]], ["remove", ["removeMedia"]]],
            link: [["link", ["linkDialogShow", "unlink"]]],
            table: [["add", ["addRowDown", "addRowUp", "addColLeft", "addColRight"]], ["delete", ["deleteRow", "deleteCol", "deleteTable"]]],
            air: [["color", ["color"]], ["font", ["bold", "underline", "clear"]], ["para", ["ul", "paragraph"]], ["table", ["table"]], ["insert", ["link", "picture"]], ["view", ["fullscreen", "codeview"]]]
          },
          airMode: !1,
          width: null,
          height: null,
          linkTargetBlank: !0,
          useProtocol: !0,
          defaultProtocol: "http://",
          focus: !1,
          tabDisabled: !1,
          tabSize: 4,
          styleWithSpan: !0,
          shortcuts: !0,
          textareaAutoSync: !0,
          tooltip: "auto",
          container: null,
          maxTextLength: 0,
          blockquoteBreakingLevel: 2,
          spellCheck: !0,
          disableGrammar: !1,
          placeholder: null,
          inheritPlaceholder: !1,
          hintMode: "word",
          hintSelect: "after",
          hintDirection: "bottom",
          styleTags: ["p", "blockquote", "pre", "h1", "h2", "h3", "h4", "h5", "h6"],
          fontNames: ["Arial", "Arial Black", "Comic Sans MS", "Courier New", "Helvetica Neue", "Helvetica", "Impact", "Lucida Grande", "Tahoma", "Times New Roman", "Verdana"],
          fontNamesIgnoreCheck: [],
          addDefaultFonts: !0,
          fontSizes: ["8", "9", "10", "11", "12", "14", "18", "24", "36"],
          fontSizeUnits: ["px", "pt"],
          colors: [["#000000", "#424242", "#636363", "#9C9C94", "#CEC6CE", "#EFEFEF", "#F7F7F7", "#FFFFFF"], ["#FF0000", "#FF9C00", "#FFFF00", "#00FF00", "#00FFFF", "#0000FF", "#9C00FF", "#FF00FF"], ["#F7C6CE", "#FFE7CE", "#FFEFC6", "#D6EFD6", "#CEDEE7", "#CEE7F7", "#D6D6E7", "#E7D6DE"], ["#E79C9C", "#FFC69C", "#FFE79C", "#B5D6A5", "#A5C6CE", "#9CC6EF", "#B5A5D6", "#D6A5BD"], ["#E76363", "#F7AD6B", "#FFD663", "#94BD7B", "#73A5AD", "#6BADDE", "#8C7BC6", "#C67BA5"], ["#CE0000", "#E79439", "#EFC631", "#6BA54A", "#4A7B8C", "#3984C6", "#634AA5", "#A54A7B"], ["#9C0000", "#B56308", "#BD9400", "#397B21", "#104A5A", "#085294", "#311873", "#731842"], ["#630000", "#7B3900", "#846300", "#295218", "#083139", "#003163", "#21104A", "#4A1031"]],
          colorsName: [["Black", "Tundora", "Dove Gray", "Star Dust", "Pale Slate", "Gallery", "Alabaster", "White"], ["Red", "Orange Peel", "Yellow", "Green", "Cyan", "Blue", "Electric Violet", "Magenta"], ["Azalea", "Karry", "Egg White", "Zanah", "Botticelli", "Tropical Blue", "Mischka", "Twilight"], ["Tonys Pink", "Peach Orange", "Cream Brulee", "Sprout", "Casper", "Perano", "Cold Purple", "Careys Pink"], ["Mandy", "Rajah", "Dandelion", "Olivine", "Gulf Stream", "Viking", "Blue Marguerite", "Puce"], ["Guardsman Red", "Fire Bush", "Golden Dream", "Chelsea Cucumber", "Smalt Blue", "Boston Blue", "Butterfly Bush", "Cadillac"], ["Sangria", "Mai Tai", "Buddha Gold", "Forest Green", "Eden", "Venice Blue", "Meteorite", "Claret"], ["Rosewood", "Cinnamon", "Olive", "Parsley", "Tiber", "Midnight Blue", "Valentino", "Loulou"]],
          colorButton: {
            foreColor: "#000000",
            backColor: "#FFFF00"
          },
          lineHeights: ["1.0", "1.2", "1.4", "1.5", "1.6", "1.8", "2.0", "3.0"],
          tableClassName: "table table-bordered",
          insertTableMaxSize: {
            col: 10,
            row: 10
          },
          dialogsInBody: !1,
          dialogsFade: !1,
          maximumImageFileSize: null,
          callbacks: {
            onBeforeCommand: null,
            onBlur: null,
            onBlurCodeview: null,
            onChange: null,
            onChangeCodeview: null,
            onDialogShown: null,
            onEnter: null,
            onFocus: null,
            onImageLinkInsert: null,
            onImageUpload: null,
            onImageUploadError: null,
            onInit: null,
            onKeydown: null,
            onKeyup: null,
            onMousedown: null,
            onMouseup: null,
            onPaste: null,
            onScroll: null
          },
          codemirror: {
            mode: "text/html",
            htmlMode: !0,
            lineNumbers: !0
          },
          codeviewFilter: !1,
          codeviewFilterRegex: /<\/*(?:applet|b(?:ase|gsound|link)|embed|frame(?:set)?|ilayer|l(?:ayer|ink)|meta|object|s(?:cript|tyle)|t(?:itle|extarea)|xml)[^>]*?>/gi,
          codeviewIframeFilter: !0,
          codeviewIframeWhitelistSrc: [],
          codeviewIframeWhitelistSrcBase: ["www.youtube.com", "www.youtube-nocookie.com", "www.facebook.com", "vine.co", "instagram.com", "player.vimeo.com", "www.dailymotion.com", "player.youku.com", "v.qq.com"],
          keyMap: {
            pc: {
              ENTER: "insertParagraph",
              "CTRL+Z": "undo",
              "CTRL+Y": "redo",
              TAB: "tab",
              "SHIFT+TAB": "untab",
              "CTRL+B": "bold",
              "CTRL+I": "italic",
              "CTRL+U": "underline",
              "CTRL+SHIFT+S": "strikethrough",
              "CTRL+BACKSLASH": "removeFormat",
              "CTRL+SHIFT+L": "justifyLeft",
              "CTRL+SHIFT+E": "justifyCenter",
              "CTRL+SHIFT+R": "justifyRight",
              "CTRL+SHIFT+J": "justifyFull",
              "CTRL+SHIFT+NUM7": "insertUnorderedList",
              "CTRL+SHIFT+NUM8": "insertOrderedList",
              "CTRL+LEFTBRACKET": "outdent",
              "CTRL+RIGHTBRACKET": "indent",
              "CTRL+NUM0": "formatPara",
              "CTRL+NUM1": "formatH1",
              "CTRL+NUM2": "formatH2",
              "CTRL+NUM3": "formatH3",
              "CTRL+NUM4": "formatH4",
              "CTRL+NUM5": "formatH5",
              "CTRL+NUM6": "formatH6",
              "CTRL+ENTER": "insertHorizontalRule",
              "CTRL+K": "linkDialog.show"
            },
            mac: {
              ENTER: "insertParagraph",
              "CMD+Z": "undo",
              "CMD+SHIFT+Z": "redo",
              TAB: "tab",
              "SHIFT+TAB": "untab",
              "CMD+B": "bold",
              "CMD+I": "italic",
              "CMD+U": "underline",
              "CMD+SHIFT+S": "strikethrough",
              "CMD+BACKSLASH": "removeFormat",
              "CMD+SHIFT+L": "justifyLeft",
              "CMD+SHIFT+E": "justifyCenter",
              "CMD+SHIFT+R": "justifyRight",
              "CMD+SHIFT+J": "justifyFull",
              "CMD+SHIFT+NUM7": "insertUnorderedList",
              "CMD+SHIFT+NUM8": "insertOrderedList",
              "CMD+LEFTBRACKET": "outdent",
              "CMD+RIGHTBRACKET": "indent",
              "CMD+NUM0": "formatPara",
              "CMD+NUM1": "formatH1",
              "CMD+NUM2": "formatH2",
              "CMD+NUM3": "formatH3",
              "CMD+NUM4": "formatH4",
              "CMD+NUM5": "formatH5",
              "CMD+NUM6": "formatH6",
              "CMD+ENTER": "insertHorizontalRule",
              "CMD+K": "linkDialog.show"
            }
          },
          icons: {
            align: "note-icon-align",
            alignCenter: "note-icon-align-center",
            alignJustify: "note-icon-align-justify",
            alignLeft: "note-icon-align-left",
            alignRight: "note-icon-align-right",
            rowBelow: "note-icon-row-below",
            colBefore: "note-icon-col-before",
            colAfter: "note-icon-col-after",
            rowAbove: "note-icon-row-above",
            rowRemove: "note-icon-row-remove",
            colRemove: "note-icon-col-remove",
            indent: "note-icon-align-indent",
            outdent: "note-icon-align-outdent",
            arrowsAlt: "note-icon-arrows-alt",
            bold: "note-icon-bold",
            caret: "note-icon-caret",
            circle: "note-icon-circle",
            close: "note-icon-close",
            code: "note-icon-code",
            eraser: "note-icon-eraser",
            floatLeft: "note-icon-float-left",
            floatRight: "note-icon-float-right",
            font: "note-icon-font",
            frame: "note-icon-frame",
            italic: "note-icon-italic",
            link: "note-icon-link",
            unlink: "note-icon-chain-broken",
            magic: "note-icon-magic",
            menuCheck: "note-icon-menu-check",
            minus: "note-icon-minus",
            orderedlist: "note-icon-orderedlist",
            pencil: "note-icon-pencil",
            picture: "note-icon-picture",
            question: "note-icon-question",
            redo: "note-icon-redo",
            rollback: "note-icon-rollback",
            square: "note-icon-square",
            strikethrough: "note-icon-strikethrough",
            subscript: "note-icon-subscript",
            superscript: "note-icon-superscript",
            table: "note-icon-table",
            textHeight: "note-icon-text-height",
            trash: "note-icon-trash",
            underline: "note-icon-underline",
            undo: "note-icon-undo",
            unorderedlist: "note-icon-unorderedlist",
            video: "note-icon-video"
          }
        }
      });
    },
    50: function _(t, e, o) {
      "use strict";

      o.r(e);
      var i = o(0),
          n = o.n(i),
          s = o(1);

      var r =
      /*#__PURE__*/
      function () {
        function r(t, e) {
          if (this.$node = t, this.options = n.a.extend({}, {
            title: "",
            target: e.container,
            trigger: "hover focus",
            placement: "bottom"
          }, e), this.$tooltip = n()(['<div class="note-tooltip">', '<div class="note-tooltip-arrow"/>', '<div class="note-tooltip-content"/>', "</div>"].join("")), "manual" !== this.options.trigger) {
            var _e35 = this.show.bind(this),
                _o33 = this.hide.bind(this),
                _i26 = this.toggle.bind(this);

            this.options.trigger.split(" ").forEach(function (n) {
              "hover" === n ? (t.off("mouseenter mouseleave"), t.on("mouseenter", _e35).on("mouseleave", _o33)) : "click" === n ? t.on("click", _i26) : "focus" === n && t.on("focus", _e35).on("blur", _o33);
            });
          }
        }

        var _proto31 = r.prototype;

        _proto31.show = function show() {
          var t = this.$node,
              e = t.offset(),
              o = n()(this.options.target).offset();
          e.top -= o.top, e.left -= o.left;
          var i = this.$tooltip,
              s = this.options.title || t.attr("title") || t.data("title"),
              r = this.options.placement || t.data("placement");
          i.addClass(r), i.find(".note-tooltip-content").text(s), i.appendTo(this.options.target);
          var a = t.outerWidth(),
              l = t.outerHeight(),
              c = i.outerWidth(),
              d = i.outerHeight();
          "bottom" === r ? i.css({
            top: e.top + l,
            left: e.left + (a / 2 - c / 2)
          }) : "top" === r ? i.css({
            top: e.top - d,
            left: e.left + (a / 2 - c / 2)
          }) : "left" === r ? i.css({
            top: e.top + (l / 2 - d / 2),
            left: e.left - c
          }) : "right" === r && i.css({
            top: e.top + (l / 2 - d / 2),
            left: e.left + a
          }), i.addClass("in");
        };

        _proto31.hide = function hide() {
          var _this51 = this;

          this.$tooltip.removeClass("in"), setTimeout(function () {
            _this51.$tooltip.remove();
          }, 200);
        };

        _proto31.toggle = function toggle() {
          this.$tooltip.hasClass("in") ? this.hide() : this.show();
        };

        return r;
      }();

      n()(document).on("click", function (t) {
        n()(t.target).closest(".note-btn-group").length || (n()(".note-btn-group.open").removeClass("open"), n()(".note-btn-group .note-btn.active").removeClass("active"));
      }), n()(document).on("click.note-dropdown-menu", function (t) {
        n()(t.target).closest(".note-dropdown-menu").parent().removeClass("open"), n()(t.target).closest(".note-dropdown-menu").parent().find(".note-btn.active").removeClass("active");
      });

      var a =
      /*#__PURE__*/
      function () {
        function a(t, e) {
          this.$button = t, this.options = n.a.extend({}, {
            target: e.container
          }, e), this.setEvent();
        }

        var _proto32 = a.prototype;

        _proto32.setEvent = function setEvent() {
          var _this52 = this;

          this.$button.on("click", function (t) {
            _this52.toggle(), t.stopImmediatePropagation();
          });
        };

        _proto32.clear = function clear() {
          var t = n()(".note-btn-group.open");
          t.find(".note-btn.active").removeClass("active"), t.removeClass("open");
        };

        _proto32.show = function show() {
          this.$button.addClass("active"), this.$button.parent().addClass("open");
          var t = this.$button.next(),
              e = t.offset(),
              o = t.outerWidth(),
              i = n()(window).width(),
              s = parseFloat(n()(this.options.target).css("margin-right"));
          e.left + o > i - s ? t.css("margin-left", i - s - (e.left + o)) : t.css("margin-left", "");
        };

        _proto32.hide = function hide() {
          this.$button.removeClass("active"), this.$button.parent().removeClass("open");
        };

        _proto32.toggle = function toggle() {
          var t = this.$button.parent().hasClass("open");
          this.clear(), t ? this.hide() : this.show();
        };

        return a;
      }();

      var l =
      /*#__PURE__*/
      function () {
        function l(t, e) {
          this.$modal = t, this.$backdrop = n()('<div class="note-modal-backdrop"/>');
        }

        var _proto33 = l.prototype;

        _proto33.show = function show() {
          var _this53 = this;

          this.$backdrop.appendTo(document.body).show(), this.$modal.addClass("open").show(), this.$modal.trigger("note.modal.show"), this.$modal.off("click", ".close").on("click", ".close", this.hide.bind(this)), this.$modal.on("keydown", function (t) {
            27 === t.which && (t.preventDefault(), _this53.hide());
          });
        };

        _proto33.hide = function hide() {
          this.$modal.removeClass("open").hide(), this.$backdrop.hide(), this.$modal.trigger("note.modal.hide"), this.$modal.off("keydown");
        };

        return l;
      }();

      var c = s.a.create('<div class="note-editor note-frame"/>'),
          d = s.a.create('<div class="note-toolbar" role="toolbar"/>'),
          h = s.a.create('<div class="note-editing-area"/>'),
          u = s.a.create('<textarea class="note-codable" aria-multiline="true"/>'),
          p = s.a.create('<div class="note-editable" contentEditable="true" role="textbox" aria-multiline="true"/>'),
          m = s.a.create(['<output class="note-status-output" role="status" aria-live="polite"/>', '<div class="note-statusbar" role="status">', '<div class="note-resizebar" aria-label="resize">', '<div class="note-icon-bar"/>', '<div class="note-icon-bar"/>', '<div class="note-icon-bar"/>', "</div>", "</div>"].join("")),
          f = s.a.create('<div class="note-editor note-airframe"/>'),
          g = s.a.create(['<div class="note-editable" contentEditable="true" role="textbox" aria-multiline="true"/>', '<output class="note-status-output" role="status" aria-live="polite"/>'].join("")),
          b = s.a.create('<div class="note-btn-group">'),
          v = s.a.create('<button type="button" class="note-btn" tabindex="-1">', function (t, e) {
        e && e.tooltip && (t.attr({
          "aria-label": e.tooltip
        }), t.data("_lite_tooltip", new r(t, {
          title: e.tooltip,
          container: e.container
        })).on("click", function (t) {
          n()(t.currentTarget).data("_lite_tooltip").hide();
        })), e.contents && t.html(e.contents), e && e.data && "dropdown" === e.data.toggle && t.data("_lite_dropdown", new a(t, {
          container: e.container
        }));
      }),
          k = s.a.create('<div class="note-dropdown-menu" role="list">', function (t, e) {
        var o = Array.isArray(e.items) ? e.items.map(function (t) {
          var o = "string" == typeof t ? t : t.value || "",
              i = e.template ? e.template(t) : t,
              s = n()('<a class="note-dropdown-item" href="#" data-value="' + o + '" role="listitem" aria-label="' + o + '"></a>');
          return s.html(i).data("item", t), s;
        }) : e.items;
        t.html(o).attr({
          "aria-label": e.title
        }), t.on("click", "> .note-dropdown-item", function (t) {
          var o = n()(this),
              i = o.data("item"),
              s = o.data("value");
          i.click ? i.click(o) : e.itemClick && e.itemClick(t, i, s);
        });
      }),
          C = s.a.create('<div class="note-dropdown-menu note-check" role="list">', function (t, e) {
        var o = Array.isArray(e.items) ? e.items.map(function (t) {
          var o = "string" == typeof t ? t : t.value || "",
              i = e.template ? e.template(t) : t,
              s = n()('<a class="note-dropdown-item" href="#" data-value="' + o + '" role="listitem" aria-label="' + t + '"></a>');
          return s.html([F(e.checkClassName), " ", i]).data("item", t), s;
        }) : e.items;
        t.html(o).attr({
          "aria-label": e.title
        }), t.on("click", "> .note-dropdown-item", function (t) {
          var o = n()(this),
              i = o.data("item"),
              s = o.data("value");
          i.click ? i.click(o) : e.itemClick && e.itemClick(t, i, s);
        });
      }),
          w = function w(t, e) {
        return t + " " + F(e.icons.caret, "span");
      },
          y = function y(t, e) {
        return b([v({
          className: "dropdown-toggle",
          contents: t.title + " " + F("note-icon-caret"),
          tooltip: t.tooltip,
          data: {
            toggle: "dropdown"
          }
        }), k({
          className: t.className,
          items: t.items,
          template: t.template,
          itemClick: t.itemClick
        })], {
          callback: e
        }).render();
      },
          x = function x(t, e) {
        return b([v({
          className: "dropdown-toggle",
          contents: t.title + " " + F("note-icon-caret"),
          tooltip: t.tooltip,
          data: {
            toggle: "dropdown"
          }
        }), C({
          className: t.className,
          checkClassName: t.checkClassName,
          items: t.items,
          template: t.template,
          itemClick: t.itemClick
        })], {
          callback: e
        }).render();
      },
          S = function S(t) {
        return b([v({
          className: "dropdown-toggle",
          contents: t.title + " " + F("note-icon-caret"),
          tooltip: t.tooltip,
          data: {
            toggle: "dropdown"
          }
        }), k([b({
          className: "note-align",
          children: t.items[0]
        }), b({
          className: "note-list",
          children: t.items[1]
        })])]).render();
      },
          $ = function $(t) {
        return b([v({
          className: "dropdown-toggle",
          contents: t.title + " " + F("note-icon-caret"),
          tooltip: t.tooltip,
          data: {
            toggle: "dropdown"
          }
        }), k({
          className: "note-table",
          items: ['<div class="note-dimension-picker">', '<div class="note-dimension-picker-mousecatcher" data-event="insertTable" data-value="1x1"/>', '<div class="note-dimension-picker-highlighted"/>', '<div class="note-dimension-picker-unhighlighted"/>', "</div>", '<div class="note-dimension-display">1 x 1</div>'].join("")
        })], {
          callback: function callback(e) {
            e.find(".note-dimension-picker-mousecatcher").css({
              width: t.col + "em",
              height: t.row + "em"
            }).mousedown(t.itemClick).mousemove(function (e) {
              !function (t, e, o) {
                var i = n()(t.target.parentNode),
                    s = i.next(),
                    r = i.find(".note-dimension-picker-mousecatcher"),
                    a = i.find(".note-dimension-picker-highlighted"),
                    l = i.find(".note-dimension-picker-unhighlighted");
                var c;

                if (void 0 === t.offsetX) {
                  var _e36 = n()(t.target).offset();

                  c = {
                    x: t.pageX - _e36.left,
                    y: t.pageY - _e36.top
                  };
                } else c = {
                  x: t.offsetX,
                  y: t.offsetY
                };

                var d = Math.ceil(c.x / 18) || 1,
                    h = Math.ceil(c.y / 18) || 1;
                a.css({
                  width: d + "em",
                  height: h + "em"
                }), r.data("value", d + "x" + h), d > 3 && d < e && l.css({
                  width: d + 1 + "em"
                }), h > 3 && h < o && l.css({
                  height: h + 1 + "em"
                }), s.html(d + " x " + h);
              }(e, t.col, t.row);
            });
          }
        }).render();
      },
          I = s.a.create('<div class="note-color-palette"/>', function (t, e) {
        var o = [];

        for (var _t58 = 0, _i27 = e.colors.length; _t58 < _i27; _t58++) {
          var _i28 = e.eventName,
              _n13 = e.colors[_t58],
              _s12 = e.colorsName[_t58],
              _r6 = [];

          for (var _t59 = 0, _e37 = _n13.length; _t59 < _e37; _t59++) {
            var _e38 = _n13[_t59],
                _o34 = _s12[_t59];

            _r6.push(['<button type="button" class="note-btn note-color-btn"', 'style="background-color:', _e38, '" ', 'data-event="', _i28, '" ', 'data-value="', _e38, '" ', 'data-title="', _o34, '" ', 'aria-label="', _o34, '" ', 'data-toggle="button" tabindex="-1"></button>'].join(""));
          }

          o.push('<div class="note-color-row">' + _r6.join("") + "</div>");
        }

        t.html(o.join("")), t.find(".note-color-btn").each(function () {
          n()(this).data("_lite_tooltip", new r(n()(this), {
            container: e.container
          }));
        });
      }),
          N = function N(t, e) {
        return b({
          className: "note-color",
          children: [v({
            className: "note-current-color-button",
            contents: t.title,
            tooltip: t.lang.color.recent,
            click: t.currentClick,
            callback: function callback(t) {
              var o = t.find(".note-recent-color");
              "foreColor" !== e && (o.css("background-color", "#FFFF00"), t.attr("data-backColor", "#FFFF00"));
            }
          }), v({
            className: "dropdown-toggle",
            contents: F("note-icon-caret"),
            tooltip: t.lang.color.more,
            data: {
              toggle: "dropdown"
            }
          }), k({
            items: ["<div>", '<div class="note-btn-group btn-background-color">', '<div class="note-palette-title">' + t.lang.color.background + "</div>", "<div>", '<button type="button" class="note-color-reset note-btn note-btn-block" data-event="backColor" data-value="inherit">', t.lang.color.transparent, "</button>", "</div>", '<div class="note-holder" data-event="backColor"/>', '<div class="btn-sm">', '<input type="color" id="html5bcp" class="note-btn btn-default" value="#21104A" style="width:100%;" data-value="cp">', '<button type="button" class="note-color-reset btn" data-event="backColor" data-value="cpbackColor">', t.lang.color.cpSelect, "</button>", "</div>", "</div>", '<div class="note-btn-group btn-foreground-color">', '<div class="note-palette-title">' + t.lang.color.foreground + "</div>", "<div>", '<button type="button" class="note-color-reset note-btn note-btn-block" data-event="removeFormat" data-value="foreColor">', t.lang.color.resetToDefault, "</button>", "</div>", '<div class="note-holder" data-event="foreColor"/>', '<div class="btn-sm">', '<input type="color" id="html5fcp" class="note-btn btn-default" value="#21104A" style="width:100%;" data-value="cp">', '<button type="button" class="note-color-reset btn" data-event="foreColor" data-value="cpforeColor">', t.lang.color.cpSelect, "</button>", "</div>", "</div>", "</div>"].join(""),
            callback: function callback(o) {
              o.find(".note-holder").each(function () {
                var e = n()(this);
                e.append(I({
                  colors: t.colors,
                  eventName: e.data("event")
                }).render());
              }), "fore" === e ? (o.find(".btn-background-color").hide(), o.css({
                "min-width": "210px"
              })) : "back" === e && (o.find(".btn-foreground-color").hide(), o.css({
                "min-width": "210px"
              }));
            },
            click: function click(o) {
              var i = n()(o.target),
                  s = i.data("event");
              var r = i.data("value");
              var a = document.getElementById("html5fcp").value,
                  l = document.getElementById("html5bcp").value;

              if ("cp" === r ? o.stopPropagation() : "cpbackColor" === r ? r = l : "cpforeColor" === r && (r = a), s && r) {
                var _o35 = "backColor" === s ? "background-color" : "color",
                    _n14 = i.closest(".note-color").find(".note-recent-color"),
                    _a5 = i.closest(".note-color").find(".note-current-color-button");

                _n14.css(_o35, r), _a5.attr("data-" + s, r), "fore" === e ? t.itemClick("foreColor", r) : "back" === e ? t.itemClick("backColor", r) : t.itemClick(s, r);
              }
            }
          })]
        }).render();
      },
          T = s.a.create('<div class="note-modal" aria-hidden="false" tabindex="-1" role="dialog"/>', function (t, e) {
        e.fade && t.addClass("fade"), t.attr({
          "aria-label": e.title
        }), t.html(['<div class="note-modal-content">', e.title ? '<div class="note-modal-header"><button type="button" class="close" aria-label="Close" aria-hidden="true"><i class="note-icon-close"></i></button><h4 class="note-modal-title">' + e.title + "</h4></div>" : "", '<div class="note-modal-body">' + e.body + "</div>", e.footer ? '<div class="note-modal-footer">' + e.footer + "</div>" : "", "</div>"].join("")), t.data("modal", new l(t, e));
      }),
          E = function E(t) {
        var e = '<div class="note-form-group"><label for="note-dialog-video-url-' + t.id + '" class="note-form-label">' + t.lang.video.url + ' <small class="text-muted">' + t.lang.video.providers + '</small></label><input id="note-dialog-video-url-' + t.id + '" class="note-video-url note-input" type="text"/></div>',
            o = ['<button type="button" href="#" class="note-btn note-btn-primary note-video-btn disabled" disabled>', t.lang.video.insert, "</button>"].join("");
        return T({
          title: t.lang.video.insert,
          fade: t.fade,
          body: e,
          footer: o
        }).render();
      },
          R = function R(t) {
        var e = '<div class="note-form-group note-group-select-from-files"><label for="note-dialog-image-file-' + t.id + '" class="note-form-label">' + t.lang.image.selectFromFiles + '</label><input id="note-dialog-image-file-' + t.id + '" class="note-note-image-input note-input" type="file" name="files" accept="image/*" multiple="multiple"/>' + t.imageLimitation + '</div><div class="note-form-group"><label for="note-dialog-image-url-' + t.id + '" class="note-form-label">' + t.lang.image.url + '</label><input id="note-dialog-image-url-' + t.id + '" class="note-image-url note-input" type="text"/></div>',
            o = ['<button href="#" type="button" class="note-btn note-btn-primary note-btn-large note-image-btn disabled" disabled>', t.lang.image.insert, "</button>"].join("");
        return T({
          title: t.lang.image.insert,
          fade: t.fade,
          body: e,
          footer: o
        }).render();
      },
          L = function L(t) {
        var e = '<div class="note-form-group"><label for="note-dialog-link-txt-' + t.id + '" class="note-form-label">' + t.lang.link.textToDisplay + '</label><input id="note-dialog-link-txt-' + t.id + '" class="note-link-text note-input" type="text"/></div><div class="note-form-group"><label for="note-dialog-link-url-' + t.id + '" class="note-form-label">' + t.lang.link.url + '</label><input id="note-dialog-link-url-' + t.id + '" class="note-link-url note-input" type="text" value="http://"/></div>' + (t.disableLinkTarget ? "" : '<div class="checkbox"><label for="note-dialog-link-nw-' + t.id + '"><input id="note-dialog-link-nw-' + t.id + '" type="checkbox" checked> ' + t.lang.link.openInNewWindow + "</label></div>") + '<div class="checkbox"><label for="note-dialog-link-up-' + t.id + '"><input id="note-dialog-link-up-' + t.id + '" type="checkbox" checked> ' + t.lang.link.useProtocol + "</label></div>",
            o = ['<button href="#" type="button" class="note-btn note-btn-primary note-link-btn disabled" disabled>', t.lang.link.insert, "</button>"].join("");
        return T({
          className: "link-dialog",
          title: t.lang.link.insert,
          fade: t.fade,
          body: e,
          footer: o
        }).render();
      },
          A = s.a.create(['<div class="note-popover bottom">', '<div class="note-popover-arrow"/>', '<div class="popover-content note-children-container"/>', "</div>"].join(""), function (t, e) {
        var o = void 0 !== e.direction ? e.direction : "bottom";
        t.addClass(o).hide(), e.hideArrow && t.find(".note-popover-arrow").hide();
      }),
          P = s.a.create('<div class="checkbox"></div>', function (t, e) {
        t.html(["<label" + (e.id ? ' for="note-' + e.id + '"' : "") + ">", '<input role="checkbox" type="checkbox"' + (e.id ? ' id="note-' + e.id + '"' : ""), e.checked ? " checked" : "", ' aria-checked="' + (e.checked ? "true" : "false") + '"/>', e.text ? e.text : "", "</label>"].join(""));
      }),
          F = function F(t, e) {
        return "<" + (e = e || "i") + ' class="' + t + '"/>';
      };

      var D = function D(t) {
        return {
          editor: c,
          toolbar: d,
          editingArea: h,
          codable: u,
          editable: p,
          statusbar: m,
          airEditor: f,
          airEditable: g,
          buttonGroup: b,
          button: v,
          dropdown: k,
          dropdownCheck: C,
          dropdownButton: y,
          dropdownButtonContents: w,
          dropdownCheckButton: x,
          paragraphDropdownButton: S,
          tableDropdownButton: $,
          colorDropdownButton: N,
          palette: I,
          dialog: T,
          videoDialog: E,
          imageDialog: R,
          linkDialog: L,
          popover: A,
          checkbox: P,
          icon: F,
          options: t,
          toggleBtn: function toggleBtn(t, e) {
            t.toggleClass("disabled", !e), t.attr("disabled", !e);
          },
          toggleBtnActive: function toggleBtnActive(t, e) {
            t.toggleClass("active", e);
          },
          check: function check(t, e) {
            t.find(".checked").removeClass("checked"), t.find('[data-value="' + e + '"]').addClass("checked");
          },
          onDialogShown: function onDialogShown(t, e) {
            t.one("note.modal.show", e);
          },
          onDialogHidden: function onDialogHidden(t, e) {
            t.one("note.modal.hide", e);
          },
          showDialog: function showDialog(t) {
            t.data("modal").show();
          },
          hideDialog: function hideDialog(t) {
            t.data("modal").hide();
          },
          getPopoverContent: function getPopoverContent(t) {
            return t.find(".note-popover-content");
          },
          getDialogBody: function getDialogBody(t) {
            return t.find(".note-modal-body");
          },
          createLayout: function createLayout(e) {
            var o = (t.airMode ? f([h([u(), g()])]) : "bottom" === t.toolbarPosition ? c([h([u(), p()]), d(), m()]) : c([d(), h([u(), p()]), m()])).render();
            return o.insertAfter(e), {
              note: e,
              editor: o,
              toolbar: o.find(".note-toolbar"),
              editingArea: o.find(".note-editing-area"),
              editable: o.find(".note-editable"),
              codable: o.find(".note-codable"),
              statusbar: o.find(".note-statusbar")
            };
          },
          removeLayout: function removeLayout(t, e) {
            t.html(e.editable.html()), e.editor.remove(), t.off("summernote"), t.show();
          }
        };
      };

      o(3), o(6);
      n.a.summernote = n.a.extend(n.a.summernote, {
        ui_template: D,
        interface: "lite"
      });
    },
    6: function _(t, e, o) {}
  });
});